// Copyright Â© 2021 Jocelyn Turcotte <turcotte.j@gmail.com>
// SPDX-License-Identifier: MIT

import {
    InstrumentData,
    GlobalEngine
} from "globals.slint";

import { ScrollableSelection } from "widgets.slint";

component InstrumentButton inherits Rectangle {
    callback pressed();
    callback right_pressed();
    in property<bool> highlighted;
    in property<InstrumentData> i;
    background: highlighted ? lightgrey : white;
    border_color: i.active ? black : lightgrey;
    border_width: 1px;
    border_radius: self.width/16;
    VerticalLayout {
        Text {
            text: i.muted ? "ðŸ”‡" : i.id;
            width: 100%;
            height: 66%;
            font_size: parent.height / 3;
            horizontal_alignment: center;
            vertical_alignment: bottom;
            color: i.muted ? #a0a0a0 : black;
        }
        Text {
            text: i.param0 + " / " + i.param1;
            width: 100%;
            font_size: parent.height / 5;
            horizontal_alignment: center;
            vertical_alignment: center;
            color: #a0a0a0;
        }
    }
    TouchArea {
        width: 100%;
        height: 100%;
        pointer-event(e) => {
            if e.kind == PointerEventKind.down {
                if e.button == PointerEventButton.left {
                    root.pressed();
                } else if e.button == PointerEventButton.right {
                    root.right_pressed();
                }
            }
        }
    }
}

export component InstrumentsPanel inherits ScrollableSelection {
    property<length> spacing: 5px;
    property<int> grid_size: 4;
    property<length> item_size: (self.width - (spacing * (grid_size - 1))) / grid_size;
    property<int> column: mod(GlobalEngine.selected_instrument, 4);
    scrolled(pos) => { GlobalEngine.select_instrument(pos * 4 + column) }
    scroll-event(e) => {
        // FIXME: This doesn't work well with high precision wheel events,
        //        but better keep it simple for now.
        GlobalEngine.cycle_instrument(
            e.delta_x == 0 ? 0 : e.delta_x < 0 ? 1 : -1,
            e.delta_y == 0 ? 0 : e.delta_y < 0 ? 1 : -1);
        return accept;
    }

    total_rows: GlobalEngine.instruments.length / 4;
    viewport_rows: 5;
    cur_row: GlobalEngine.selected_instrument / 4;
    // The number of rows is static and a scroll bar there looks ugly.
    // To scroll with the mouse, the wheel must be used here.
    scrollbar_width: 0px;

    for row in self.viewport_rows:
    Rectangle{
        for col in 4:
        Rectangle {
            property<int> idx: (row + root.scroll_row) * 4 + col;
            x: col * (self.width + root.spacing);
            y: row * (self.height + root.spacing);
            width: self.height;
            height: root.item_size;
            if idx < GlobalEngine.instruments.length:
            InstrumentButton {
                i: GlobalEngine.instruments[idx];
                highlighted: idx == GlobalEngine.selected_instrument;
                pressed => { GlobalEngine.select_instrument(idx); }
                right_pressed => { GlobalEngine.toggle_mute_instrument(idx); }
            }
        }
    }
}

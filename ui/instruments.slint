// Copyright Â© 2021 Jocelyn Turcotte <turcotte.j@gmail.com>
// SPDX-License-Identifier: MIT

import { InstrumentData, GlobalEngine } from "globals.slint";

component InstrumentButton inherits Rectangle {
    callback pressed();
    callback right_pressed();
    in property<bool> highlighted;
    in property<InstrumentData> i;
    width: self.height;
    background: i.active ? #e0e0e0 : white;
    border_color: highlighted ? black : #a0a0a0;
    border_width: 1px;
    border_radius: self.width/16;
    VerticalLayout {
        Text {
            text: i.muted ? "ðŸ”‡" : i.id;
            width: 100%;
            height: 66%;
            font_size: parent.height / 3;
            horizontal_alignment: center;
            vertical_alignment: bottom;
            color: i.muted ? #a0a0a0 : black;
        }
        // FIXME: It's a bit crappy to have to set it separately, maybe it could just be the last step settings set or something.
        //        Or I could have B+arrows only set the instruments parameters, stamp them on any press (though should any A+ on other steps copy params too?),
        //        and require A+B+arrows to tweak the steps.
        Text {
            text: i.param0 + " / " + i.param1;
            width: 100%;
            font_size: parent.height / 5;
            horizontal_alignment: center;
            vertical_alignment: center;
            color: #a0a0a0;
        }
    }
    TouchArea {
        width: 100%;
        height: 100%;
        pointer-event(e) => {
            if (e.kind == PointerEventKind.down) {
                if (e.button == PointerEventButton.left) {
                    root.pressed();
                } else if (e.button == PointerEventButton.right) {
                    root.right_pressed();
                }
            }
        }
    }
}

export component InstrumentsPanel inherits Flickable {
    property<length> spacing: 5px;
    property<int> grid_size: 4;
    property<length> item_size: (self.width - (spacing * (grid_size - 1))) / grid_size;
    viewport_height: item_size * (GlobalEngine.instruments.length / 4) + (GlobalEngine.instruments.length / 4 - 1) * spacing;
    interactive: false;

    for instrument[idx] in GlobalEngine.instruments:
    InstrumentButton {
        i: instrument;
        highlighted: idx == GlobalEngine.selected_instrument;
        pressed => { GlobalEngine.select_instrument(idx); }
        right_pressed => { GlobalEngine.toggle_mute_instrument(idx); }
        x: mod(idx, 4) * (self.width + parent.spacing);
        y: floor(idx / 4) * (self.height + parent.spacing);
        height: parent.item_size;
    }
}

// Copyright © 2021 Jocelyn Turcotte <turcotte.j@gmail.com>
// SPDX-License-Identifier: MIT

import {
    Button,
    GridBox
} from "std-widgets.slint";

import {
    PatternData,
    StepData,
    GlobalEngine
} from "globals.slint";

import { PageBar } from "widgets.slint";

SequencerPattern := Rectangle {
    callback clicked();
    property<int> number;
    property<bool> highlighted;
    property<bool> fill;
    background: fill ? #c0c0c0 : white;
    border_width: 1px;
    border_color: highlighted ? black : #a0a0a0;
    border_radius: width/8;
    Text {
        text: "P" + (number + 1);
        width: 100%;
        height: 100%;
        font_size: min(width, height) / 2.5;
        color: highlighted ? #505050 : #a0a0a0;
        horizontal_alignment: center;
        vertical_alignment: center;
    }
    TouchArea {
        width: 100%;
        height: 100%;
        clicked => { root.clicked(); }
    }
}

SequencerStep := Rectangle {
    callback pressed();
    callback right_pressed();
    property<bool> highlighted;
    property<bool> press;
    property<bool> release;
    property<string> name;
    property<bool> beat;
    background: press
        ? #c0c0c0
        : release 
            ? #f0f0f0
            : white;
    border_width: beat || highlighted ? 2px : 1px;
    border_color: highlighted ? black : #c0c0c0;
    border_radius: width/8;
    l := Text {
        text:
            (press ? name : "") + 
            (press && release ? "" : (release ? "\n⇥" : "\n↦"));
        visible: press || release;
        y: (parent.height - height) / 2;
        width: 100%;
        // height: 100%;
        font_size: width / 3;
        color: #505050;
        horizontal_alignment: center;
        vertical_alignment: center;
    }
    TouchArea {
        width: 100%;
        height: 100%;
        pointer-event(e) => {
            if (e.kind == PointerEventKind.down) {
                if (e.button == PointerEventButton.left) {
                    root.pressed();
                } else if (e.button == PointerEventButton.right) {
                    root.right_pressed();
                }
            }
        }
    }
}

PatternsList := Rectangle {
    property<length> scroll_gutter_width <=> page_bar.width;
    callback clicked(int);

    HorizontalLayout {
        spacing: 2px;

        for pos in 16:
        SequencerPattern {
            number: page_bar.current_page * 16 + pos;
            property<PatternData> pattern: GlobalEngine.sequencer_patterns[number];
            highlighted: pattern.active;
            fill: !pattern.empty;
            clicked => { root.clicked(number); }
        }
    }

    page_bar := PageBar {
        // Float to the right of the parent, in the gutter.
        x: parent.width + 1px;
    }
}

PatternsPanel := GridBox {
    property<length> scroll_gutter_width <=> patterns_list.scroll_gutter_width;
    Row {
        patterns_list := PatternsList {
            clicked(idx) => { GlobalEngine.pattern_clicked(idx); }
        }
    }
    Row {
        HorizontalLayout {
            spacing: 2px;

            for step[idx] in GlobalEngine.sequencer_steps:
            SequencerStep {
                highlighted: step.active;
                press: step.press;
                release: step.release;
                name: step.note_name;
                beat: mod(idx, 4) == 0;
                pressed => { GlobalEngine.toggle_step(idx); }
                right_pressed => { GlobalEngine.toggle_step_release(idx); }
            }
        }
    }
}

export { SequencerPattern, PatternsList, PatternsPanel }
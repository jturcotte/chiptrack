// Copyright Â© 2021 Jocelyn Turcotte <turcotte.j@gmail.com>
// SPDX-License-Identifier: MIT

import { InstrumentsPanel } from "instruments.slint";

import {
    GlobalUI,
    InstrumentsFocusScope,
    PatternsFocusScope,
    StepsFocusScope
} from "common.slint";

import {
    SongPatternData,
    PatternInstrumentData,
    StepData,
    GlobalEngine,
    GlobalUtils
} from "globals.slint";

import {
    ScrollableSelection
} from "widgets.slint";

component Cursor inherits Rectangle {
    in property<length> parent_width;
    in property<length> parent_height;
    width: parent_width;
    height: parent_height;
    background: transparent;
    border_width: 1px;
    border_color: black;
    border_radius: self.height / 8;
}

component SequencerPattern inherits Rectangle {
    callback clicked();
    in property<int> number;
    in property<bool> highlighted;
    in property<bool> fill;
    border_radius: self.height / 8;
    background: fill ? lightgrey : transparent;
    if highlighted:
    Cursor {
        parent_width: parent.width;
        parent_height: parent.height;
    }
    Text {
        text: number != -1 ? number + 1 : "--";
        color: number != -1 ? black : #a0a0a0;
        x: parent.width * 0.1;
        width: parent.width * 0.8;
        height: 100%;
        font_size: min(self.width, self.height) * 0.7;
        horizontal_alignment: left;
        vertical_alignment: center;
    }
    TouchArea {
        width: 100%;
        height: 100%;
        clicked => { root.clicked(); }
    }
}

component StepSelectableText inherits Rectangle {
    in property<bool> selected;
    in property text <=> t.text;
    in property text_color <=> t.color;
    in property horizontal_alignment <=> t.horizontal_alignment;
    border_radius: self.height / 8;
    background: selected ? lightgrey : transparent;
    t := Text {
        font_size: self.height * 0.75;
        width: 100%;
        height: 100%;
        horizontal_alignment: center;
        vertical_alignment: center;
    }
}

component SequencerStep { 
    callback pressed();
    callback right_pressed();
    in property<bool> highlighted;
    in property<bool> show_selection;
    in property<StepData> step;
    in property<string> name;
    Rectangle {
        border_width: 1px;
        border_color: highlighted ? black : transparent;
        border_radius: self.height / 8;
        width: parent.width + 4px;
        height: parent.height + 4px;
    }

    HorizontalLayout {
        x: 0px;
        spacing: 1px;
        StepSelectableText {
            selected: step.selected && root.show_selection && GlobalUI.selected_column == 0 /*param0*/;
            width: 30%;
            text: (step.param0_set ? step.param0_val : "");
            text_color: step.press ? black : #a0a0a0;
            horizontal_alignment: right;
        }
        StepSelectableText {
            // width: 5%;
            text: "/";
            text_color: step.press ? black : #a0a0a0;
            // horizontal_stretch: 0;
        }
        StepSelectableText {
            selected: step.selected && root.show_selection && GlobalUI.selected_column == 1 /*param1*/;
            width: 30%;
            text: (step.param1_set ? step.param1_val : "");
            text_color: step.press ? black : #a0a0a0;
            horizontal_alignment: left;
        }
        StepSelectableText {
            text: (step.press ? "[" : "-") + (step.press ? name : "---");
            selected: step.selected && root.show_selection && GlobalUI.selected_column == 2 /*press*/;
            y: (parent.height - self.height) / 2;
            text_color: step.press || step.release ? black : #a0a0a0;
            horizontal_alignment: right;
            horizontal_stretch: 1;
        }
        StepSelectableText {
            text: (step.release ? "]" : "-");
            selected: step.selected && root.show_selection && GlobalUI.selected_column >= 2/*press,release*/;
            y: (parent.height - self.height) / 2;
            text_color: step.press || step.release ? black : #a0a0a0;
            horizontal_alignment: left;
        }
    }
    TouchArea {
        width: 100%;
        height: 100%;
        pointer-event(e) => {
            if (e.kind == PointerEventKind.down) {
                if (e.button == PointerEventButton.left) {
                    root.pressed();
                } else if (e.button == PointerEventButton.right) {
                    root.right_pressed();
                }
            }
        }
    }
}

component PatternsList {
    out property<length> height_of_cell: (self.height - layout.spacing * 16) / 17;
    callback clicked(int);

    title := Rectangle {
        x: scroll.scrollbar_width + self.width * 0.1;
        y: 0px;
        height: height_of_cell;

        Text {
            x: 0px;
            text: "Song";
            height: 100%;
            font_size: self.height * 0.8;
        }
    }

    scroll := ScrollableSelection {
        total_rows: GlobalEngine.sequencer_song_patterns.length;
        cur_row: GlobalEngine.sequencer_song_pattern_selected;
        viewport_rows: 16;
        scrollbar_width: height_of_cell * 0.25;
        scrolled(pos) => { GlobalEngine.select_song_pattern(pos) }

        y: height_of_cell + layout.spacing;
        height: parent.height - self.y;
        width: 100%;

        layout := VerticalLayout {
            spacing: 1px;
            for i in 16:
            Rectangle {
                property<int> idx: i + scroll.scroll_row;
                if idx < GlobalEngine.sequencer_song_patterns.length:
                SequencerPattern {
                    property<SongPatternData> pattern: GlobalEngine.sequencer_song_patterns[idx];
                    number: pattern.number;
                    highlighted: idx == GlobalEngine.sequencer_song_pattern_active;
                    fill: pattern.selected;
                    clicked => { GlobalEngine.select_song_pattern(idx); }
                }
            }
        }
    }


    @children
}

export component PatternsPanel inherits HorizontalLayout {
    out property instruments_grid_has_focus <=> instruments_key_handler.has_focus;
    public function toggle_instruments_grid_focus() {
        if (!instruments_key_handler.has_focus) {        
            instruments_key_handler.focus();
        } else {
            steps_key_handler.focus();
        }
    }
    callback root_key_pressed(KeyEvent) -> EventResult;
    callback root_key_released(KeyEvent) -> EventResult;
    forward_focus: steps_key_handler;

    spacing: 12px;
    patterns_list := PatternsList {
        width: self.height_of_cell * 2.75;
        fs := PatternsFocusScope {
            root_key_pressed(e) => { root.root_key_pressed(e); }
            root_key_released(e) => { root.root_key_released(e); }
        }
        Rectangle {
            x: -5px;
            y: -5px;
            width: parent.width + 10px;
            height: parent.height + 10px;
            border-color: fs.has_focus ? grey : transparent;
            border-width: 1px;
            border-radius: min(self.width, self.height) / 8;
        }


    }

    current_pattern := Rectangle { 
        width: patterns_list.height_of_cell * 8;
        VerticalLayout {
            spacing: 1px;
            label := Rectangle {
                Text {
                    x: 0px;
                    text: GlobalEngine.script_instrument_ids[GlobalEngine.selected_instrument];
                    height: 100%;
                    width: 100%;
                    font_size: self.height * 0.8;
                    horizontal-alignment: center;
                }
            }

            for step[idx] in GlobalEngine.sequencer_steps:
            HorizontalLayout {
                SequencerStep {
                    highlighted: idx == GlobalEngine.sequencer_step_active;
                    show_selection: steps_key_handler.has_focus;
                    step: step;
                    name: GlobalUtils.get_midi_note_name(step.note);
                    pressed => { GlobalEngine.toggle_step(idx); }
                    right_pressed => { GlobalEngine.toggle_step_release(idx); }
                }
            }
        }
        Rectangle {
            x: -5px;
            y: -5px;
            width: parent.width + 10px;
            height: parent.height + 10px;
            border-color: steps_key_handler.has_focus ? grey : transparent;
            border-width: 1px;
            border-radius: min(self.width, self.height) / 8;
        }
        steps_key_handler := StepsFocusScope {
            root_key_pressed(e) => { root.root_key_pressed(e); }
            root_key_released(e) => { root.root_key_released(e); }
        }
    }

    Rectangle {
        pattern_instruments := HorizontalLayout {
            visible: !instruments_key_handler.has_focus;
            spacing: 8px;
            for idx in GlobalEngine.sequencer_pattern_instruments.length:
            VerticalLayout {
                property<PatternInstrumentData> instrument: idx < GlobalEngine.sequencer_pattern_instruments_len
                    ? GlobalEngine.sequencer_pattern_instruments[idx]
                    : {id: "--", notes: [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]};
                width: (self.height - self.spacing * 16) / 17 * 2;
                spacing: 1px;

                Rectangle {
                    Text {
                        x: 0px;
                        text: instrument.id;
                        height: 100%;
                        width: 100%;
                        font_size: self.height * 0.8;
                        horizontal-alignment: center;
                    }
                }

                for note in instrument.notes:
                Rectangle {
                    Text {
                        x: 0px;
                        height: 100%;
                        width: 100%;
                        text: note != -1 ? GlobalUtils.get_midi_note_short_name(note) : "--";
                        font_size: min(self.width, self.height) * 0.75;
                        color: note != -1 ? black : #a0a0a0;
                        vertical_alignment: center;
                        horizontal_alignment: center;
                    }
                }
            }
        }

        InstrumentsPanel {
            height: 100%;
            width: 100%;
            visible: instruments_key_handler.has_focus;
        }

        instruments_key_handler := InstrumentsFocusScope {
            width: 0px;
            root_key_pressed(e) => { root.root_key_pressed(e); }
            root_key_released(e) => { root.root_key_released(e); }
        }
    }
}

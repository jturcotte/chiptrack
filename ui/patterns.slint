// Copyright Â© 2021 Jocelyn Turcotte <turcotte.j@gmail.com>
// SPDX-License-Identifier: MIT

import { InstrumentsPanel } from "instruments.slint";

import {
    FocusedPanel,
    InstrumentsFocusScope,
    PatternsFocusScope,
    StepsFocusScope
} from "common.slint";

import {
    SongPatternData,
    PatternInstrumentData,
    StepData,
    GlobalEngine,
    GlobalUI,
    GlobalUtils
} from "globals.slint";

import {
    ScrollableSelection
} from "widgets.slint";

component Cursor inherits Rectangle {
    in property<length> parent_width;
    in property<length> parent_height;
    width: parent_width;
    height: parent_height;
    background: transparent;
    border_width: 1px;
    border_color: black;
    border_radius: self.height / 8;
}

component SequencerPattern inherits Rectangle {
    callback clicked();
    in property<int> number;
    in property<bool> highlighted;
    in property<bool> fill;
    border_radius: self.height / 8;
    background: fill ? lightgrey : transparent;
    if highlighted:
    Cursor {
        parent_width: parent.width;
        parent_height: parent.height;
    }
    Text {
        text: number != -1 ? number + 1 : "--";
        color: number != -1 ? black : #a0a0a0;
        x: parent.width * 0.1;
        width: parent.width * 0.8;
        height: 100%;
        font_size: min(self.width, self.height) * 0.7;
        horizontal_alignment: left;
        vertical_alignment: center;
    }
    TouchArea {
        width: 100%;
        height: 100%;
        clicked => { root.clicked(); }
    }
}

component StepSelectableText inherits Rectangle {
    in property<bool> selected;
    in property text <=> t.text;
    in property text_color <=> t.color;
    in property horizontal_alignment <=> t.horizontal_alignment;
    // FIXME: Check what makes sense on the gba
    property<color> selection_color: GlobalUI.selected_step_range_first == -1
        ? lightgrey
        : #a0a0ff;
    border_radius: self.height / 8;
    background: selected ? selection_color : transparent;
    t := Text {
        font_size: self.height * 0.75;
        width: 100%;
        height: 100%;
        horizontal_alignment: center;
        vertical_alignment: center;
    }
}

component SequencerStep { 
    callback pressed();
    callback right_pressed();
    in property<bool> step_selected;
    in property<bool> highlighted;
    in property<bool> show_selection;
    in property<StepData> step;
    in property<string> name;
    Rectangle {
        border_width: 1px;
        border_color: highlighted ? black : transparent;
        border_radius: self.height / 8;
        width: parent.width + 4px;
        height: parent.height + 4px;
    }

    HorizontalLayout {
        x: 0px;
        spacing: 1px;
        StepSelectableText {
            selected: step_selected && root.show_selection && GlobalUI.selected_column == 0 /*param0*/;
            width: 25%;
            text: (step.param0_set ? GlobalUtils.to_signed_hex(step.param0_val) : "");
            text_color: step.press ? black : #a0a0a0;
            horizontal_alignment: right;
        }
        StepSelectableText {
            width: 10%;
            text: "/";
            text_color: step.press ? black : #a0a0a0;
        }
        StepSelectableText {
            selected: step_selected && root.show_selection && GlobalUI.selected_column == 1 /*param1*/;
            width: 25%;
            text: (step.param1_set ? GlobalUtils.to_signed_hex(step.param1_val) : "");
            text_color: step.press ? black : #a0a0a0;
            horizontal_alignment: left;
        }
        StepSelectableText {
            text: (step.press ? "[" : "-") + (step.press ? name : "---");
            selected: step_selected && root.show_selection && GlobalUI.selected_column == 2 /*press*/;
            y: (parent.height - self.height) / 2;
            text_color: step.press || step.release ? black : #a0a0a0;
            horizontal_alignment: right;
            horizontal_stretch: 1;
        }
        StepSelectableText {
            text: (step.release ? "]" : "-");
            selected: step_selected && root.show_selection && GlobalUI.selected_column >= 2/*press,release*/;
            y: (parent.height - self.height) / 2;
            text_color: step.press || step.release ? black : #a0a0a0;
            horizontal_alignment: left;
        }
    }
    TouchArea {
        width: 100%;
        height: 100%;
        pointer-event(e) => {
            if e.kind == PointerEventKind.down {
                if e.button == PointerEventButton.left {
                    root.pressed();
                } else if e.button == PointerEventButton.right {
                    root.right_pressed();
                }
            }
        }
    }
}

component PatternsList {
    out property<length> height_of_cell: (self.height - layout.spacing * 16) / 17;
    callback clicked(int);

    title := Rectangle {
        x: scroll.scrollbar_width + self.width * 0.1;
        y: 0px;
        height: height_of_cell;

        Text {
            x: 0px;
            text: "Song";
            height: 100%;
            font_size: self.height * 0.8;
        }
    }

    scroll := ScrollableSelection {
        total_rows: GlobalEngine.sequencer_song_patterns.length;
        cur_row: GlobalEngine.sequencer_song_pattern_selected;
        viewport_rows: 16;
        scrollbar_width: height_of_cell * 0.25;
        scrolled(pos) => { GlobalUI.select_song_pattern(pos) }
        scroll-event(e) => {
            GlobalUI.select_next_song_pattern(e.delta_y < 0);
            return accept;
        }


        y: height_of_cell + layout.spacing;
        height: parent.height - self.y;
        width: 100%;

        layout := VerticalLayout {
            spacing: 1px;
            for i in 16:
            Rectangle {
                property<int> idx: i + scroll.scroll_row;
                if idx < GlobalEngine.sequencer_song_patterns.length:
                SequencerPattern {
                    property<SongPatternData> pattern: GlobalEngine.sequencer_song_patterns[idx];
                    number: pattern.number;
                    highlighted: idx == GlobalEngine.sequencer_song_pattern_active;
                    fill: pattern.selected;
                    clicked => { GlobalUI.select_song_pattern(idx); }
                }
            }
        }
    }

    @children
}

component ScalableText {
    in property text <=> t.text;
    in property horizontal_alignment <=> t.horizontal_alignment;
    t := Text {
        // Setting the position also prevents the text to be in the parent's layout,
        // which allows setting its size to the parent and remove the relationship of
        // the font-size with it.
        x: 0px;
        font_size: self.height * 0.75;
        width: 100%;
        height: 100%;
        horizontal_alignment: center;
        vertical_alignment: center;
    }
}

export component PatternsPanel inherits HorizontalLayout {
    out property<FocusedPanel> focused_panel: steps;
    callback root_key_pressed(KeyEvent) -> EventResult;
    callback root_key_released(KeyEvent) -> EventResult;

    public function cycle_focus_panel(forward: bool, wrap: bool) {
        if forward {
            if focused_panel == FocusedPanel.patterns {
                focused_panel = FocusedPanel.steps;
                steps_key_handler.focus();
            } else if (focused_panel == FocusedPanel.steps){
                focused_panel = FocusedPanel.instruments;
                instruments_key_handler.focus();
            } else if (wrap && focused_panel == FocusedPanel.instruments){
                focused_panel = FocusedPanel.patterns;
                patterns_key_handler.focus();
            }
        } else {
            if (focused_panel == FocusedPanel.instruments){
                focused_panel = FocusedPanel.steps;
                steps_key_handler.focus();
            } else if focused_panel == FocusedPanel.steps {
                focused_panel = FocusedPanel.patterns;
                patterns_key_handler.focus();
            } else if (wrap && focused_panel == FocusedPanel.patterns){
                focused_panel = FocusedPanel.instruments;
                instruments_key_handler.focus();
            }
        }
    }
    public function toggle_instruments_grid() {
        if focused_panel != FocusedPanel.instruments {
            focused_panel = FocusedPanel.instruments;
            instruments_key_handler.focus();
        } else {
            focused_panel = FocusedPanel.steps;
            steps_key_handler.focus();
        }
    }

    forward_focus: steps_key_handler;

    spacing: 12px;
    patterns_list := PatternsList {
        width: self.height_of_cell * 2.75;

        Rectangle {
            x: -5px;
            y: -5px;
            width: parent.width + 10px;
            height: parent.height + 10px;
            border_color: focused_panel == FocusedPanel.patterns ? lightgrey : transparent;
            border_width: 1px;
            border_radius: patterns_list.height_of_cell / 4;
        }
        patterns_key_handler := PatternsFocusScope {
            width: 0px;
            root_key_pressed(e) => { root.root_key_pressed(e); }
            root_key_released(e) => { root.root_key_released(e); }
        }
    }

    current_pattern := Rectangle { 
        width: patterns_list.height_of_cell * 6.5;
        VerticalLayout {
            spacing: 1px;
            HorizontalLayout {
                x: 0px;
                spacing: 1px;
                ScalableText {
                    // Those dimensions should match what is used inside SequencerStep.
                    width: 25%;
                    text: (GlobalEngine.instrument_param_0.defined ? GlobalEngine.instrument_param_0.name : "");
                    horizontal_alignment: right;
                }
                ScalableText {
                    width: 10%;
                    text: "/";
                }
                ScalableText {
                    width: 25%;
                    text: (GlobalEngine.instrument_param_1.defined ? GlobalEngine.instrument_param_1.name : "");
                    horizontal_alignment: left;
                }
                ScalableText {
                    text: GlobalEngine.script_instrument_ids[GlobalEngine.displayed_instrument];
                }
            }

            for step[idx] in GlobalEngine.sequencer_steps:
            SequencerStep {
                step_selected: idx == GlobalUI.selected_step
                    || (GlobalUI.selected_step_range_first > GlobalUI.selected_step
                        && GlobalUI.selected_step <= idx
                        && idx <= GlobalUI.selected_step_range_first)
                    || (GlobalUI.selected_step_range_first != -1
                        && GlobalUI.selected_step_range_first <= idx
                        && idx <= GlobalUI.selected_step);
                highlighted: idx == GlobalEngine.sequencer_step_active;
                show_selection: focused_panel == FocusedPanel.steps;
                step: step;
                name: GlobalUtils.get_midi_note_name(step.note);
                pressed => {
                    GlobalEngine.toggle_step(idx);
                    GlobalUI.select_step(idx);
                }
                right_pressed => {
                    GlobalEngine.toggle_step_release(idx);
                    GlobalUI.select_step(idx);
                }
            }
        }
        Rectangle {
            x: -5px;
            y: -5px;
            width: parent.width + 10px;
            height: parent.height + 10px;
            border_color: focused_panel == FocusedPanel.steps ? lightgrey : transparent;
            border_width: 1px;
            border_radius: patterns_list.height_of_cell / 4;
        }
        steps_key_handler := StepsFocusScope {
            width: 0px;
            root_key_pressed(e) => { root.root_key_pressed(e); }
            root_key_released(e) => { root.root_key_released(e); }
        }
    }

    Rectangle {
        pattern_instruments := HorizontalLayout {
            visible: focused_panel != FocusedPanel.instruments;
            spacing: 8px;

            for idx in GlobalEngine.sequencer_pattern_instruments.length:
            TouchArea {
                property<PatternInstrumentData> instrument: idx < GlobalEngine.sequencer_pattern_instruments_len
                    ? GlobalEngine.sequencer_pattern_instruments[idx]
                    : {id: "--", synth_index: -1, notes: [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]};
                width: (self.height - l.spacing * 16) / 17 * 2;
                clicked => {
                    if instrument.synth_index != -1 {
                        GlobalEngine.display_instrument(instrument.synth_index);
                    }
                }

                l := VerticalLayout {
                    spacing: 1px;

                    Rectangle {
                        Text {
                            x: 0px;
                            text: instrument.id;
                            height: 100%;
                            width: 100%;
                            font_size: self.height * 0.8;
                            horizontal-alignment: center;
                            color: instrument.synth_index == -1 ? #a0a0a0 : black;
                        }
                    }

                    for note in instrument.notes:
                    Rectangle {
                        Text {
                            x: 0px;
                            height: 100%;
                            width: 100%;
                            text: note != -1 ? GlobalUtils.get_midi_note_short_name(note) : "--";
                            font_size: min(self.width, self.height) * 0.75;
                            color: instrument.synth_index != -1 && note != -1 ? black : #a0a0a0;
                            vertical_alignment: center;
                            horizontal_alignment: center;
                        }
                    }
                }
            }
        }

        InstrumentsPanel {
            height: 100%;
            width: 100%;
            visible: focused_panel == FocusedPanel.instruments;

            Rectangle {
                x: -5px;
                y: -5px;
                width: parent.width + 10px;
                height: parent.height + 10px;
                border_color: focused_panel == FocusedPanel.instruments ? lightgrey : transparent;
                border_width: 1px;
                border_radius: patterns_list.height_of_cell / 4;
            }
            instruments_key_handler := InstrumentsFocusScope {
                width: 0px;
                root_key_pressed(e) => { root.root_key_pressed(e); }
                root_key_released(e) => { root.root_key_released(e); }
            }
        }
    }
}

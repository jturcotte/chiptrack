import {
    GlobalEngine
} from "globals.slint";

// State shared by the desktop and gba UIs is put here in a
// global to avoid having to duplicate them in the separate root components.
export global GlobalUI {
    in-out property<bool> instruments_grid: false;
}

export component PatternsFocusScope inherits FocusScope {
    // FIXME: Check if the manual propagation is needed after upgrading to 1.0.2
    callback root_key_pressed(KeyEvent) -> EventResult;
    callback root_key_released(KeyEvent) -> EventResult;

    key_pressed(event) => {
        if (event.text == Key.UpArrow) { GlobalEngine.select_next_song_pattern(false); }
        else if (event.text == Key.DownArrow) { GlobalEngine.select_next_song_pattern(true); }
        else {
            return root_key_pressed(event);
        }
        accept
    }
    key_released(e) => { root.root_key_released(e); }

}

export component StepsFocusScope inherits Rectangle {
    callback root_key_pressed(KeyEvent) -> EventResult;
    callback root_key_released(KeyEvent) -> EventResult;

    out property<bool> has_focus: fs.has_focus;
    forward_focus: fs;

    fs := FocusScope {
        key_pressed(e) => {
            if (e.text == " ") { GlobalUI.instruments_grid = !GlobalUI.instruments_grid; }
            else if (GlobalUI.instruments_grid && e.text == Key.Shift) { GlobalEngine.cycle_instrument_param_start(); }
            else if (GlobalUI.instruments_grid && e.modifiers.shift && e.text == Key.UpArrow) { GlobalEngine.cycle_instrument_param(1, true); }
            else if (GlobalUI.instruments_grid && e.modifiers.shift && e.text == Key.DownArrow) { GlobalEngine.cycle_instrument_param(1, false); }
            else if (GlobalUI.instruments_grid && e.modifiers.shift && e.text == Key.LeftArrow) { GlobalEngine.cycle_instrument_param(0, false); }
            else if (GlobalUI.instruments_grid && e.modifiers.shift && e.text == Key.RightArrow) { GlobalEngine.cycle_instrument_param(0, true); }
            else if (GlobalUI.instruments_grid && e.text == Key.UpArrow) { GlobalEngine.cycle_instrument(0, -1); }
            else if (GlobalUI.instruments_grid && e.text == Key.DownArrow) { GlobalEngine.cycle_instrument(0, 1); }
            else if (GlobalUI.instruments_grid && e.text == Key.LeftArrow) { GlobalEngine.cycle_instrument(-1, 0); }
            else if (GlobalUI.instruments_grid && e.text == Key.RightArrow) { GlobalEngine.cycle_instrument(1, 0); }
            else if (!GlobalUI.instruments_grid && e.modifiers.shift && e.text == Key.Control) { GlobalEngine.toggle_current_step_release(); }
            else if (!GlobalUI.instruments_grid && e.text == Key.Control) { GlobalEngine.cycle_note_start(); }
            else if (!GlobalUI.instruments_grid && e.modifiers.control && e.text == Key.UpArrow) { GlobalEngine.cycle_note(true, true); }
            else if (!GlobalUI.instruments_grid && e.modifiers.control && e.text == Key.DownArrow) { GlobalEngine.cycle_note(false, true); }
            else if (!GlobalUI.instruments_grid && e.modifiers.control && e.text == Key.LeftArrow) { GlobalEngine.cycle_note(false, false); }
            else if (!GlobalUI.instruments_grid && e.modifiers.control && e.text == Key.RightArrow) { GlobalEngine.cycle_note(true, false); }
            else if (!GlobalUI.instruments_grid && e.text == Key.Shift) { GlobalEngine.cycle_step_param_start(); }
            else if (!GlobalUI.instruments_grid && e.modifiers.shift && e.text == Key.UpArrow) { GlobalEngine.cycle_step_param(1, true); }
            else if (!GlobalUI.instruments_grid && e.modifiers.shift && e.text == Key.DownArrow) { GlobalEngine.cycle_step_param(1, false); }
            else if (!GlobalUI.instruments_grid && e.modifiers.shift && e.text == Key.LeftArrow) { GlobalEngine.cycle_step_param(0, false); }
            else if (!GlobalUI.instruments_grid && e.modifiers.shift && e.text == Key.RightArrow) { GlobalEngine.cycle_step_param(0, true); }
            else if (e.text == Key.UpArrow) { GlobalEngine.manually_advance_step(false); }
            else if (e.text == Key.DownArrow) { GlobalEngine.manually_advance_step(true); }
            else {
                return root_key_pressed(e);
            }
            accept
        }
        key_released(e) => { 
            if (GlobalUI.instruments_grid && e.text == Key.Shift) { GlobalEngine.cycle_instrument_param_end(); }
            if (!GlobalUI.instruments_grid && e.text == Key.Control) { GlobalEngine.cycle_note_end(); }
            if (!GlobalUI.instruments_grid && e.text == Key.Shift) { GlobalEngine.cycle_step_param_end(); }
            else {
                return root_key_released(e);
            }
            accept
        }
    }
}

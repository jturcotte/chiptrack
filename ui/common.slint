import {
    GlobalEngine
} from "globals.slint";

export enum StepColumn { params, press, release }

// State shared by the desktop and gba UIs is put here in a
// global to avoid having to duplicate them in the separate root components.
export global GlobalUI {
    in-out property<StepColumn> selected_column: press;

    function cycle_step_colum(forward: bool) {
        if (forward) {
            if (GlobalUI.selected_column == StepColumn.params) {
                GlobalUI.selected_column = StepColumn.press;
            } else if (GlobalUI.selected_column == StepColumn.press) {
                GlobalUI.selected_column = StepColumn.release;
            }
        } else {
            if (GlobalUI.selected_column == StepColumn.press) {
                GlobalUI.selected_column = StepColumn.params;
            } else if (GlobalUI.selected_column == StepColumn.release) {
                GlobalUI.selected_column = StepColumn.press;
            }
        }
    }
}


export component PatternsFocusScope inherits FocusScope {
    // FIXME: Check if the manual propagation is needed after upgrading to 1.0.2
    callback root_key_pressed(KeyEvent) -> EventResult;
    callback root_key_released(KeyEvent) -> EventResult;

    key_pressed(e) => {
        if (e.modifiers.shift && e.text == Key.Control) { GlobalEngine.remove_last_song_pattern(); }
        else if (e.text == Key.Control) { GlobalEngine.cycle_song_pattern_start(); }
        else if (e.modifiers.control && e.text == Key.LeftArrow) { GlobalEngine.cycle_song_pattern(false); }
        else if (e.modifiers.control && e.text == Key.RightArrow) { GlobalEngine.cycle_song_pattern(true); }
        else {
            return root_key_pressed(e);
        }
        accept
    }
    key_released(e) => { root.root_key_released(e); }

}

export component StepsFocusScope inherits FocusScope {
    callback root_key_pressed(KeyEvent) -> EventResult;
    callback root_key_released(KeyEvent) -> EventResult;

    key_pressed(e) => {
        if (e.modifiers.shift && e.text == Key.Control) { GlobalEngine.cut_selected_step_note(); }
        else if (GlobalUI.selected_column == StepColumn.params && e.text == Key.Control) { GlobalEngine.cycle_step_param_start(); }
        else if (GlobalUI.selected_column == StepColumn.params && e.modifiers.control && e.text == Key.UpArrow) { GlobalEngine.cycle_step_param(1, true); }
        else if (GlobalUI.selected_column == StepColumn.params && e.modifiers.control && e.text == Key.DownArrow) { GlobalEngine.cycle_step_param(1, false); }
        else if (GlobalUI.selected_column == StepColumn.params && e.modifiers.control && e.text == Key.LeftArrow) { GlobalEngine.cycle_step_param(0, false); }
        else if (GlobalUI.selected_column == StepColumn.params && e.modifiers.control && e.text == Key.RightArrow) { GlobalEngine.cycle_step_param(0, true); }
        else if (GlobalUI.selected_column == StepColumn.press && e.text == Key.Control) { GlobalEngine.cycle_note_start(); }
        else if (GlobalUI.selected_column == StepColumn.press && e.modifiers.control && e.text == Key.UpArrow) { GlobalEngine.cycle_note(true, true); }
        else if (GlobalUI.selected_column == StepColumn.press && e.modifiers.control && e.text == Key.DownArrow) { GlobalEngine.cycle_note(false, true); }
        else if (GlobalUI.selected_column == StepColumn.press && e.modifiers.control && e.text == Key.LeftArrow) { GlobalEngine.cycle_note(false, false); }
        else if (GlobalUI.selected_column == StepColumn.press && e.modifiers.control && e.text == Key.RightArrow) { GlobalEngine.cycle_note(true, false); }
        else if (GlobalUI.selected_column == StepColumn.release && e.text == Key.Control) { GlobalEngine.toggle_selected_step_release(); }
        else if (!e.modifiers.shift && e.text == Key.LeftArrow) { GlobalUI.cycle_step_colum(false); }
        else if (!e.modifiers.shift && e.text == Key.RightArrow) { GlobalUI.cycle_step_colum(true); }
        else if (!e.modifiers.shift && e.text == Key.UpArrow) { GlobalEngine.select_next_step(false); }
        else if (!e.modifiers.shift && e.text == Key.DownArrow) { GlobalEngine.select_next_step(true); }
        else {
            return root_key_pressed(e);
        }
        accept
    }
    key_released(e) => { 
        if (GlobalUI.selected_column == StepColumn.params && e.text == Key.Control) { GlobalEngine.cycle_step_param_end(); }
        else if (GlobalUI.selected_column == StepColumn.press && e.text == Key.Control) { GlobalEngine.cycle_note_end(); }
        else {
            return root_key_released(e);
        }
        accept
    }
}

export component InstrumentsFocusScope inherits FocusScope {
    callback root_key_pressed(KeyEvent) -> EventResult;
    callback root_key_released(KeyEvent) -> EventResult;

    key_pressed(e) => {
        if (e.text == Key.Control) { GlobalEngine.cycle_instrument_param_start(); }
        else if (e.modifiers.control && e.text == Key.UpArrow) { GlobalEngine.cycle_instrument_param(1, true); }
        else if (e.modifiers.control && e.text == Key.DownArrow) { GlobalEngine.cycle_instrument_param(1, false); }
        else if (e.modifiers.control && e.text == Key.LeftArrow) { GlobalEngine.cycle_instrument_param(0, false); }
        else if (e.modifiers.control && e.text == Key.RightArrow) { GlobalEngine.cycle_instrument_param(0, true); }
        else if (e.text == Key.UpArrow) { GlobalEngine.cycle_instrument(0, -1); }
        else if (e.text == Key.DownArrow) { GlobalEngine.cycle_instrument(0, 1); }
        else if (e.text == Key.LeftArrow) { GlobalEngine.cycle_instrument(-1, 0); }
        else if (e.text == Key.RightArrow) { GlobalEngine.cycle_instrument(1, 0); }
        else {
            return root_key_pressed(e);
        }
        accept
    }
    key_released(e) => { 
        if (e.text == Key.Control) { GlobalEngine.cycle_instrument_param_end(); }
        else {
            return root_key_released(e);
        }
        accept
    }
}
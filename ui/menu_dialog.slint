// Copyright Â© 2022 Jocelyn Turcotte <turcotte.j@gmail.com>
// SPDX-License-Identifier: MIT

import { Button, ComboBox, GridBox, ScrollView, SpinBox, VerticalBox, HorizontalBox, LineEdit } from "std-widgets.slint";

import { GlobalEngine, GlobalSettings } from "globals.slint";

component OverlayDialog inherits Rectangle {
    callback closed();
    background: #ffffffC0;
    // Eat events beside the dialog
    TouchArea {
        width: 100%;
        height: 100%;
    }
    Rectangle {
        background: white;
        border-color: grey;
        border_width: 2px;
        border_radius: 10px;
        width: 80%;
        height: 80%;
        x: self.width / 0.8 * 0.1;
        y: self.height / 0.8 * 0.1;
    }
    HorizontalLayout {
        padding_left: self.width / 0.8 * 0.1;
        padding_top: self.height / 0.8 * 0.1;
        padding_right: self.padding_left;
        padding_bottom: self.padding_top;
        VerticalBox {
            Rectangle {
                vertical-stretch: 1;
                @children
            }
            HorizontalBox {
                alignment: end;    
                Button { 
                    text: "OK";
                    clicked => { root.closed(); }
                }
            }
        }        
    }
}

export component MenuDialog inherits OverlayDialog {
    in property<bool> desktop_web;
    callback show_log_window();
    ScrollView{
        GridBox {
            spacing: 24px;
            Row {
                Text {
                    colspan: 2;
                    text: "File";
                    font_size: 24px;
                }
            }
            Row {
                VerticalBox {
                    colspan: 2;
                    Button {
                        text: "New";
                        clicked => {
                            // TODO: Ask for confirmation if the previous project is not saved
                            GlobalEngine.clear_song_and_load_default_instruments();
                            root.closed();
                        }
                    }
                    Button {
                        text: "Open File";
                        clicked => {
                            GlobalEngine.open_file_dialog();
                            root.closed();
                        }
                    }
                    HorizontalLayout {

                        url := LineEdit {
                            placeholder_text: "Gist URL";
                        }
                        Button {
                            text: "Open GitHub gist";
                            clicked => {
                                GlobalEngine.open_gist(url.text);
                                root.closed();
                            }
                        }
                    }
                    Button {
                        text: "Save";
                        clicked => {
                            GlobalEngine.save_project();
                            root.closed();
                        }
                    }
                    Button {
                        text: "Save as";
                        clicked => {
                            GlobalEngine.save_project_as();
                            root.closed();
                        }
                    }
                    Button {
                        text: "Export as GBA .sav";
                        clicked => {
                            GlobalEngine.export_project_as_gba_sav();
                            root.closed();
                        }
                    }
                }
            }
            Row {
                Text {
                    colspan: 2;
                    text: "Song Settings";
                    font_size: 24px;
                }
            }
            Row {
                Text {
                    vertical_alignment: center;
                    text: "Frames per step";
                }
                HorizontalBox {
                    padding: 0px;
                    frames_per_step_control := SpinBox {
                        value: GlobalSettings.song_settings.frames_per_step;
                        minimum: 1;
                        maximum: 16;
                        edited => {
                            GlobalSettings.song_settings.frames_per_step = self.value;
                            GlobalSettings.song_settings_changed(GlobalSettings.song_settings);
                        }
                    }
                    Text {
                        preferred-width: 80px;
                        vertical_alignment: center;
                        horizontal_alignment: right;
                        property<float> bpm: 60 /* s */ * 60 /* fps */ / 4 /* steps per beat */ / frames_per_step_control.value;
                        text: "(~" + round(bpm) + " BPM)";
                    }
                }
            }
            Row {
                Text {
                    colspan: 2;
                    text: "Settings";
                    font_size: 24px;
                }
            }
            Row {
                Text {
                    vertical_alignment: center;
                    text: "Sync Mode";
                }
                ComboBox {
                    model: ["Off", "PO SY1 (master, left channel is 2 PPQN)"];
                    current_value: GlobalSettings.settings.sync_enabled ? "PO SY1 (master, left channel is 2 PPQN)" : "Off";
                    selected => {
                        GlobalSettings.settings.sync_enabled = self.current_value != "Off";
                        GlobalSettings.settings_changed(GlobalSettings.settings);
                    }
                }
            }
            Row {
                VerticalLayout {
                    colspan: 2;
                    if !desktop_web:
                    Button {
                        text: "Show Log Window";
                        clicked => {
                            show_log_window();
                        }
                    }
                    if desktop_web:
                    Rectangle { }
                }
            }
            // Fill any available space left inside the ScrollView
            Row {
                Rectangle {
                    vertical-stretch: 1;
                }
            }
        }
    }
}

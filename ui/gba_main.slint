// Copyright Â© 2023 Jocelyn Turcotte <turcotte.j@gmail.com>
// SPDX-License-Identifier: MIT

import {
    GlobalUI,
    InstrumentsFocusScope,
    PatternsFocusScope,
    StepsFocusScope
} from "common.slint";

import {
    GlobalSettings,
    GlobalEngine,
    GlobalUtils
} from "globals.slint";

export {
    GlobalSettings,
    GlobalEngine,
    GlobalUI,
    GlobalUtils
}

export component MainWindow inherits Window {
    in-out property<bool> playing: false;
    out property patterns_have_focus <=> patterns_focus_scope.has_focus;
    out property steps_have_focus <=> steps_focus_scope.has_focus;
    out property instruments_have_focus <=> instruments_focus_scope.has_focus;

    callback octave_increased(int);
    callback global_key_event(string, bool) -> bool;

    function root_key_pressed(event: KeyEvent) -> EventResult {
        if (event.text == Key.LeftArrow) { GlobalEngine.cycle_pattern_instrument(false); }
        else if (event.text == Key.RightArrow) { GlobalEngine.cycle_pattern_instrument(true); }
        else if (event.text == Key.UpArrow) { GlobalEngine.select_next_song_pattern(false); }
        else if (event.text == Key.DownArrow) { GlobalEngine.select_next_song_pattern(true); }
        else if (event.text == Key.Return) { GlobalEngine.play_clicked(!root.playing); }
        else if (event.text == Key.Escape) { GlobalEngine.mute_instruments(); }
        else {
            return global_key_event(event.text, true) ? accept : reject;
        }
        accept
    }
    function root_key_released(event: KeyEvent) -> EventResult {
        global_key_event(event.text, false) ? accept : reject
    }

    patterns_focus_scope := PatternsFocusScope {
        root_key_pressed(e) => { root.root_key_pressed(e); }
        root_key_released(e) => { root.root_key_released(e); }
    }
    forward_focus: steps_focus_scope;
    steps_focus_scope := StepsFocusScope {
        root_key_pressed(e) => { root.root_key_pressed(e); }
        root_key_released(e) => { root.root_key_released(e); }
    }
    instruments_focus_scope := InstrumentsFocusScope {
        root_key_pressed(e) => { root.root_key_pressed(e); }
        root_key_released(e) => { root.root_key_released(e); }
    }
}

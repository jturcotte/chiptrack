// Copyright Â© 2023 Jocelyn Turcotte <turcotte.j@gmail.com>
// SPDX-License-Identifier: MIT

import {
    FocusedPanel,
    GlobalUI,
    InstrumentsFocusScope,
    PatternsFocusScope,
    StepsFocusScope
} from "common.slint";

import {
    GlobalSettings,
    GlobalEngine,
    GlobalUtils
} from "globals.slint";

export {
    GlobalSettings,
    GlobalEngine,
    GlobalUI,
    GlobalUtils
}

export component MainWindow inherits Window {
    in-out property<bool> playing: false;
    out property<FocusedPanel> focused_panel: steps;

    callback save_to_sram();
    callback clear_status_text();

    function root_key_pressed(e: KeyEvent) -> EventResult {
        if (e.modifiers.shift && e.text == Key.LeftArrow) { cycle_focus_panel(false); }
        else if (e.modifiers.shift && e.text == Key.RightArrow) { cycle_focus_panel(true); }
        else if (e.text == Key.LeftArrow) { GlobalEngine.cycle_pattern_instrument(false); }
        else if (e.text == Key.RightArrow) { GlobalEngine.cycle_pattern_instrument(true); }
        else if (e.text == Key.UpArrow) { GlobalEngine.select_next_song_pattern(false); }
        else if (e.text == Key.DownArrow) { GlobalEngine.select_next_song_pattern(true); }
        else if (e.modifiers.control && e.text == Key.Return) { save_to_sram(); }
        else if (e.text == Key.Return) { GlobalEngine.play_clicked(!root.playing); }
        else if (e.text == Key.Escape) {
            GlobalEngine.mute_instruments();
            clear_status_text();
        } else {
            return reject;
        }
        return accept;
    }

    function cycle_focus_panel(forward: bool) {
        if (forward) {
            if (focused_panel == FocusedPanel.patterns) {
                focused_panel = FocusedPanel.steps;
                steps_key_handler.focus();
            } else if (focused_panel == FocusedPanel.steps){
                focused_panel = FocusedPanel.instruments;
                instruments_key_handler.focus();
            }
        } else {
            if (focused_panel == FocusedPanel.instruments){
                focused_panel = FocusedPanel.steps;
                steps_key_handler.focus();
            } else if (focused_panel == FocusedPanel.steps) {
                focused_panel = FocusedPanel.patterns;
                patterns_key_handler.focus();
            }
        }
    }

    forward_focus: steps_key_handler;
    patterns_key_handler := PatternsFocusScope {
        root_key_pressed(e) => { root.root_key_pressed(e); }
    }
    steps_key_handler := StepsFocusScope {
        root_key_pressed(e) => { root.root_key_pressed(e); }
    }
    instruments_key_handler := InstrumentsFocusScope {
        root_key_pressed(e) => { root.root_key_pressed(e); }
    }
}

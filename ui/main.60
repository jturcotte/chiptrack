import { Button, CheckBox, SpinBox, Slider, GroupBox, LineEdit, StandardListView, ComboBox, VerticalBox, HorizontalBox, GridBox } from "sixtyfps_widgets.60";

struct SongPatternData := {
    number: int,
    active: bool,
}
struct PatternData := {
    empty: bool,
    active: bool,
}
struct StepData := {
    empty: bool,
    active: bool,
    note_name: string,
}
struct InstrumentData := {
    selected: bool,
    active: bool,
}
struct NoteData := {
    note_number: int,
    scale_pos: int,
    is_black: bool,
    active: bool,
}


SongPattern := Rectangle {
    callback clicked();
    property<int> number: 0;
    property<bool> highlighted;
    background: white;
    border_width: 1px;
    border_color: highlighted ? black : #a0a0a0;
    border_radius: width/8;
    Text {
        text: "P" + (number + 1);
        width: 100%;
        height: 100%;
        font_size: min(width, height) / 2.5;
        color: highlighted ? #505050 : #a0a0a0;
        horizontal_alignment: center;
        vertical_alignment: center;
    }
    TouchArea {
        width: 100%;
        height: 100%;
        clicked => { root.clicked(); }
    }
}

SequencerPattern := Rectangle {
    callback clicked();
    property<int> number: 0;
    property<bool> highlighted;
    property<bool> empty;
    background: empty ? white : #c0c0c0;
    border_width: 1px;
    border_color: highlighted ? black : #a0a0a0;
    border_radius: width/8;
    Text {
        text: "P" + (number + 1);
        width: 100%;
        height: 100%;
        font_size: min(width, height) / 2.5;
        color: highlighted ? #505050 : #a0a0a0;
        horizontal_alignment: center;
        vertical_alignment: center;
    }
    TouchArea {
        width: 100%;
        height: 100%;
        clicked => { root.clicked(); }
    }
}

SequencerStep := Rectangle {
    callback clicked();
    property<bool> highlighted;
    property<bool> empty;
    property<string> name;
    property<bool> beat;
    background: empty ? white : #c0c0c0;
    border_width: beat || highlighted ? 2px : 1px;
    border_color: highlighted ? black : #a0a0a0;
    border_radius: width/8;
    Text {
        text: name;
        visible: !empty;
        width: 100%;
        height: 100%;
        font_size: width / 3;
        color: #505050;
        horizontal_alignment: center;
        vertical_alignment: center;
    }
    TouchArea {
        width: 100%;
        height: 100%;
        clicked => { root.clicked(); }
    }
}

PianoKey :=  Rectangle {
    property<bool> highlighted;
    property<bool> is_black: false;
    property<string> note_name;
    callback clicked();
    background: {
        if (is_black != highlighted) {
            black;
        } else {
            white;
        }
    };
    border_color: black;
    border_width: 1px;
    Text {
        text: note_name;
        width: 100%;
        height: 98%;
        font_size: width / 3;
        color: #505050;
        horizontal_alignment: center;
        vertical_alignment: bottom;
    }
    area := TouchArea {
        width: parent.width;
        height: parent.height;
        clicked => {
            root.clicked();
        }
    }
}

InstrumentButton := Rectangle {
    callback clicked();
    property<int> instrument_number: 0;
    property<bool> highlighted;
    property<bool> active;
    width: height;
    background: active ? #e0e0e0 : white;
    border_color: highlighted ? black : #a0a0a0;
    border_width: 1px;
    border_radius: width/16;
    Text {
        text: instrument_number + 1;
        width: 100%;
        height: 100%;
        font_size: height / 4;
        horizontal_alignment: center;
        vertical_alignment: center;
    }
    TouchArea {
        width: 100%;
        height: 100%;
        clicked => { root.clicked(); }
    }
}

MainWindow := Window {
    property<[SongPatternData]> sequencer_song_patterns: [
        {number: 0},
        {number: 1},
        {number: 0},
        {number: 1},
        {number: 0, active: true},
        {number: 1},
        {number: 2},
        {number: 3}];
    property<[PatternData]> sequencer_patterns: [
        {empty: true, active: true},
        {empty: true}, {empty: true}, {empty: true},
        {empty: true}, {empty: true}, {empty: true}, {empty: true},
        {empty: true}, {empty: true}, {empty: true}, {empty: true},
        {empty: true}, {empty: true}, {empty: true}, {empty: true},
        ];
    property<[StepData]> sequencer_steps: [
        {empty: false, note_name: "C-4"}, {empty: true}, {empty: true}, {empty: true},
        {empty: false, note_name: "C-4"}, {empty: true}, {empty: true}, {empty: true},
        {empty: false, note_name: "C-4"}, {empty: true}, {empty: true}, {empty: true},
        {empty: false, note_name: "C-4"}, {empty: true}, {empty: true}, {empty: true}];
    property<[InstrumentData]> instruments: [
        {active: false}, {active: false}, {active: false}, {active: false},
        {active: false}, {active: false}, {active: false}, {active: false},
        {active: false}, {active: false}, {active: false}, {active: false},
        {active: false}, {active: false}, {active: false}, {active: false},
        ];
    property<int> first_note: 60;
    property<[NoteData]> notes: [
        {note_number: first_note, scale_pos: 0, is_black: false, active: false},
        {note_number: first_note + 2, scale_pos: 1, is_black: false, active: false},
        {note_number: first_note + 4, scale_pos: 2, is_black: false, active: false},
        {note_number: first_note + 5, scale_pos: 3, is_black: false, active: false},
        {note_number: first_note + 7, scale_pos: 4, is_black: false, active: false},
        {note_number: first_note + 9, scale_pos: 5, is_black: false, active: false},
        {note_number: first_note + 11, scale_pos: 6, is_black: false, active: false},
        {note_number: first_note + 12, scale_pos: 7, is_black: false, active: false},
        {note_number: first_note + 1, scale_pos: 0, is_black: true, active: false},
        {note_number: first_note + 3, scale_pos: 1, is_black: true, active: false},
        {note_number: first_note + 6, scale_pos: 3, is_black: true, active: false},
        {note_number: first_note + 8, scale_pos: 4, is_black: true, active: false},
        {note_number: first_note + 10, scale_pos: 5, is_black: true, active: false},
    ];
    property<bool> playing: false;
    property in_song_mode <=> song_mode_button.toggled;
    callback get_midi_note_name(int) -> string;
    callback mod(float, float) -> float;

    callback note_pressed(int);
    callback octave_increased(int);
    callback select_instrument(int);
    callback pattern_clicked(int);
    callback step_clicked(int);
    callback manually_advance_step(bool);
    callback play_clicked(bool);
    callback record_clicked(bool);
    callback append_song_pattern(int);
    callback remove_last_song_pattern();
    callback clear_song_patterns();
    callback save_project();
    callback global_key_event(string, bool);

    property<bool> waveform_is_zero: true;
    property waveform_image <=> waveform.source;
    property<length> waveform_width: waveform.width;
    property<length> waveform_height: waveform.height;

    preferred_width: 800px;
    preferred_height: 480px;

    forward-focus: KeyHandler;
    KeyHandler := FocusScope {
        key-pressed(event) => {
            if (event.modifiers.control) {
                if (event.text == "s") { save_project(); }
                else if (event.text == "1") { root.pattern_clicked(0); }
                else if (event.text == "2") { root.pattern_clicked(1); }
                else if (event.text == "3") { root.pattern_clicked(2); }
                else if (event.text == "4") { root.pattern_clicked(3); }
                else if (event.text == "5") { root.pattern_clicked(4); }
                else if (event.text == "6") { root.pattern_clicked(5); }
                else if (event.text == "7") { root.pattern_clicked(6); }
                else if (event.text == "8") { root.pattern_clicked(7); }
                else if (event.text == "9") { root.pattern_clicked(8); }
                else if (event.text == "0") { root.pattern_clicked(9); }
            } else {
                // FIXME: QWERTY
                if (event.text == "a") { note_pressed(first_note); }
                else if (event.text == "r") { note_pressed(first_note + 2); }
                else if (event.text == "s") { note_pressed(first_note + 4); }
                else if (event.text == "t") { note_pressed(first_note + 5); }
                else if (event.text == "d") { note_pressed(first_note + 7); }
                else if (event.text == "h") { note_pressed(first_note + 9); }
                else if (event.text == "n") { note_pressed(first_note + 11); }
                else if (event.text == "e") { note_pressed(first_note + 12); }
                else if (event.text == "w") { note_pressed(first_note + 1); }
                else if (event.text == "f") { note_pressed(first_note + 3); }
                else if (event.text == "g") { note_pressed(first_note + 6); }
                else if (event.text == "j") { note_pressed(first_note + 8); }
                else if (event.text == "l") { note_pressed(first_note + 10); }
                else if (event.text == "1") { root.select_instrument(0); }
                else if (event.text == "2") { root.select_instrument(1); }
                else if (event.text == "3") { root.select_instrument(2); }
                else if (event.text == "4") { root.select_instrument(3); }
                else if (event.text == "5") { root.select_instrument(4); }
                else if (event.text == "6") { root.select_instrument(5); }
                else if (event.text == "7") { root.select_instrument(6); }
                else if (event.text == "8") { root.select_instrument(7); }
                else if (event.text == "9") { root.select_instrument(8); }
                else if (event.text == "0") { root.select_instrument(9); }
                // Left
                else if (event.text == "\u{e}") { root.manually_advance_step(false); }
                // Left
                else if (event.text == "\u{f}") { root.manually_advance_step(true); }
                // Home
                else if (event.text == "\u{2}") { root.octave_increased(-1); }
                // End
                else if (event.text == "\u{3}") { root.octave_increased(1); }
                // Tab
                else if (event.text == "\u{9}") { song_mode_button.toggled = !song_mode_button.toggled; }
                else if (event.text == "\n") { root.play_clicked(!root.playing); }
            }
            global_key_event(event.text, true);
            accept
        }
        key-released(event) => {
            global_key_event(event.text, false);
            accept
        }

        VerticalBox {
            GridBox {
                height: 40%;
                Row {
                    Rectangle {
                        if (in_song_mode):
                        HorizontalLayout {
                            spacing: 2px;
                            for pattern[idx] in sequencer_song_patterns:
                            SongPattern {
                                number: pattern.number;
                                highlighted: pattern.active;
                                width: (parent.width - (parent.spacing * 15)) / 16;
                            }
                        }
                        if (!in_song_mode):
                        HorizontalLayout {
                            spacing: 2px;
                            for pattern[idx] in sequencer_patterns:
                            SequencerPattern {
                                number: idx;
                                highlighted: pattern.active;
                                empty: pattern.empty;
                                clicked => { root.pattern_clicked(idx); }
                            }
                        }
                    }

                    play_button := Button {
                        colspan: 2;
                        text: root.playing ? "Stop" : "Play";
                        clicked => {
                            root.play_clicked(!root.playing);
                        }
                    }
                
                }
                Row {
                    HorizontalLayout {
                        spacing: 2px;
                        for step[idx] in sequencer_steps:
                            SequencerStep {
                                highlighted: step.active;
                                empty: step.empty;
                                name: step.note_name;
                                beat: mod(idx, 4) == 0;
                                clicked => { root.step_clicked(idx); }
                            }
                    }
                    song_mode_button := Button {
                        property<bool> toggled: false;
                        text: toggled ? "Song" : "Notes";
                        clicked => {
                            toggled = !toggled;
                        }
                    }
                    record_button := Button {
                        property<bool> toggled: true;
                        text: toggled ? "Rec" : "No\nRec";
                        clicked => {
                            toggled = !toggled;
                            root.record_clicked(toggled);
                        }
                    }
                }
            }
            HorizontalBox {
                if (!in_song_mode):
                Rectangle {
                    for note[idx] in notes:
                        PianoKey {
                            note_name: idx == 0 ? get_midi_note_name(note.note_number) : "";
                            is_black: note.is_black;
                            x: note.is_black
                                ? (note.scale_pos + 1) * floor(parent.width / 8px) * 1px - width / 2
                                : note.scale_pos * floor(parent.width / 8px) * 1px;
                            width: is_black
                                ? parent.width / 8 * 0.8
                                : floor(parent.width / 8px) * 1px + 1px;

                            height: is_black ? 60% : 100%;
                            highlighted: note.active;
                            clicked => { root.note_pressed(note.note_number); }
                        }
                }
                if (in_song_mode):
                VerticalLayout {
                    HorizontalLayout {
                        spacing: 2px;
                        for pattern[idx] in sequencer_patterns:
                        SequencerPattern {
                            number: idx;
                            highlighted: pattern.active;
                            empty: pattern.empty;
                            clicked => { root.append_song_pattern(idx); }
                        }
                    }
                    HorizontalBox {
                        height: 25%;
                        Button {
                            text: "⌫";
                            clicked => { root.remove_last_song_pattern(); }
                        }
                        Button {
                            text: "Clear";
                            clicked => { root.clear_song_patterns(); }
                        }
                    }
                }
                VerticalBox {
                    padding: 0px;
                    Rectangle {
                        background: white;
                        waveform := Image {
                            width: 100%;
                            height: 100%;
                            image-rendering: pixelated;
                        }
                        Rectangle {
                            border_color: black;
                            border_width: 1px;
                            border_radius: height/16;
                        }
                        // This wouldn't be necessary if instruments_grid defined its
                        // height as a percentage, but I couldn't find a way to make one depend
                        // on grid_size.
                        vertical-stretch: 1 - instruments_grid.vertical_stretch;

                    }
                    instruments_grid := Rectangle {
                        property<length> spacing: 5px;
                        property<int> grid_size: 4;
                        property<length> item_size: (width - (spacing * (grid_size - 1))) / grid_size;
                        vertical-stretch: (grid_size / (grid_size + 1));
                        width: height;
                        for instrument[idx] in instruments:
                            InstrumentButton {
                                instrument_number: idx;
                                highlighted: instrument.selected;
                                active: instrument.active;
                                clicked => { root.select_instrument(instrument_number); }
                                x: mod(idx, 4) * (width + parent.spacing);
                                y: floor(idx / 4) * (height + parent.spacing);
                                height: parent.item_size;
                            }
                    }
                }
            }
        }
    }
}

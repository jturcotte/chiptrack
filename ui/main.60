import { Button, CheckBox, SpinBox, Slider, GroupBox, LineEdit, StandardListView, ComboBox, VerticalBox, HorizontalBox, GridBox } from "sixtyfps_widgets.60";

struct BarData := {
}
struct StepData := {
    empty: bool,
}
struct NoteData := {
    note_number: int,
    scale_pos: int,
    is_black: bool,
    active: bool,
}

PianoKey :=  Rectangle {
    property<bool> highlighted;
    property<bool> is_black: false;
    callback clicked();
    background: {
        if (is_black != highlighted) {
            black;
        } else {
            white;
        }
    };
    border_color: black;
    border_width: 1px;
    area := TouchArea {
        width: parent.width;
        height: parent.height;
        clicked => {
            root.clicked();
        }
    }
}
InstrumentButton := Rectangle {
    callback clicked();
    property<int> instrument_number: 0;
    min_width: 50px;
    min_height: 50px;
    background: white;
    border_color: black;
    border_width: 1px;
    Text {
        text: instrument_number;
        width: 100%;
        height: 100%;
        horizontal_alignment: center;
        vertical_alignment: center;
    }
    TouchArea {
        width: 100%;
        height: 100%;
        clicked => { root.clicked(); }
    }
}

BarStep := Rectangle {
    callback clicked();
    property<bool> highlighted;
    property<bool> locked;
    background: white;
    border_width: 1px;
    border_color: highlighted ? black : #b0b0b0;
    Text {
        text: locked ? "Locked" : "";
        width: 100%;
        height: 100%;
        horizontal_alignment: center;
        vertical_alignment: center;
    }
    TouchArea {
        width: 100%;
        height: 100%;
        clicked => { root.clicked(); }
    }
}

SequencerStep := Rectangle {
    callback clicked();
    property<bool> highlighted;
    property<bool> empty;
    background: empty ? white : #c0c0c0;
    border_width: 1px;
    border_color: highlighted ? black : #b0b0b0;
    TouchArea {
        width: 100%;
        height: 100%;
        clicked => { root.clicked(); }
    }
}

MainWindow := Window {
    property<[BarData]> sequencer_bars: [{}, {}, {}, {}];
    property<[StepData]> sequencer_steps: [
        {empty: false}, {empty: true}, {empty: true}, {empty: true},
        {empty: false}, {empty: true}, {empty: true}, {empty: true},
        {empty: false}, {empty: true}, {empty: true}, {empty: true},
        {empty: false}, {empty: true}, {empty: true}, {empty: true}];
    property<[NoteData]> notes: [
        {note_number: 60, scale_pos: 0, is_black: false, active: false},
        {note_number: 62, scale_pos: 1, is_black: false, active: false},
        {note_number: 64, scale_pos: 2, is_black: false, active: false},
        {note_number: 65, scale_pos: 3, is_black: false, active: false},
        {note_number: 67, scale_pos: 4, is_black: false, active: false},
        {note_number: 69, scale_pos: 5, is_black: false, active: false},
        {note_number: 71, scale_pos: 6, is_black: false, active: false},
        {note_number: 72, scale_pos: 7, is_black: false, active: false},
        {note_number: 61, scale_pos: 0, is_black: true, active: false},
        {note_number: 63, scale_pos: 1, is_black: true, active: false},
        {note_number: 66, scale_pos: 3, is_black: true, active: false},
        {note_number: 68, scale_pos: 4, is_black: true, active: false},
        {note_number: 70, scale_pos: 5, is_black: true, active: false},
    ];
    property<int> current_note;
    property<int> current_sequencer_bar;
    property<int> current_sequencer_step;
    property<int> locked_sequencer_bar: -1;
    property<bool> playing;
    callback note_pressed(int);
    callback selected_instrument_changed(int);
    callback bar_clicked(int);
    callback step_clicked(int);
    callback play_clicked(bool);
    callback record_clicked(bool);

    FocusScope {
        key-pressed(event) => {
            debug(event);
            if (event.text == "a") { note_pressed(60); }
            else if (event.text == "r") { note_pressed(62); }
            else if (event.text == "s") { note_pressed(64); }
            else if (event.text == "t") { note_pressed(65); }
            else if (event.text == "d") { note_pressed(67); }
            else if (event.text == "h") { note_pressed(69); }
            else if (event.text == "n") { note_pressed(71); }
            else if (event.text == "e") { note_pressed(72); }
            else if (event.text == "w") { note_pressed(61); }
            else if (event.text == "f") { note_pressed(63); }
            else if (event.text == "g") { note_pressed(66); }
            else if (event.text == "j") { note_pressed(68); }
            else if (event.text == "l") { note_pressed(70); }
            accept
        }
    }

    VerticalBox {
        HorizontalBox {
            height: 50%;
            Rectangle {} // Spacer
            VerticalBox {
                GridBox {
                    Row {
                        InstrumentButton {
                            instrument_number: 0;
                            clicked => { root.selected_instrument_changed(instrument_number); }
                        }
                        InstrumentButton {
                            instrument_number: 1;
                            clicked => { root.selected_instrument_changed(instrument_number); }
                        }
                        InstrumentButton {
                            instrument_number: 2;
                            clicked => { root.selected_instrument_changed(instrument_number); }
                        }
                    }
                    Row {
                        InstrumentButton {
                            instrument_number: 3;
                            clicked => { root.selected_instrument_changed(instrument_number); }
                        }
                        InstrumentButton {
                            instrument_number: 4;
                            clicked => { root.selected_instrument_changed(instrument_number); }
                        }
                        InstrumentButton {
                            instrument_number: 5;
                            clicked => { root.selected_instrument_changed(instrument_number); }
                        }
                    }
                    Row {
                        InstrumentButton {
                            instrument_number: 6;
                            clicked => { root.selected_instrument_changed(instrument_number); }
                        }
                        InstrumentButton {
                            instrument_number: 7;
                            clicked => { root.selected_instrument_changed(instrument_number); }
                        }
                        InstrumentButton {
                            instrument_number: 8;
                            clicked => { root.selected_instrument_changed(instrument_number); }
                        }
                    }
                }
            }
            Rectangle {} // Spacer
            VerticalBox {
                min_width: 100px;

                for __[idx] in sequencer_bars:
                    BarStep {
                        highlighted: current_sequencer_bar == idx;
                        locked: locked_sequencer_bar == idx;
                        clicked => { root.bar_clicked(idx); }
                    }
            }
            VerticalBox {
                min_width: 100px;
                for step[idx] in sequencer_steps:
                    SequencerStep {
                        highlighted: current_sequencer_step == idx;
                        empty: step.empty;
                        clicked => { root.step_clicked(idx); }
                    }
            }
            Rectangle {} // Spacer
            VerticalBox {
                play_button := Button {
                    text: root.playing ? "Play" : "Stop";
                    clicked => {
                        root.play_clicked(!root.playing);
                    }
                }
                record_button := Button {
                    property<bool> toggled: true;
                    text: toggled ? "Record" : "Free";
                    clicked => {
                        toggled = !toggled;
                        root.record_clicked(toggled);
                    }
                }
            }
        }
        Rectangle {
            min_height: 100px;
            for note[idx] in notes:
                PianoKey {
                    is_black: note.is_black;
                    x: note.is_black
                        ? (note.scale_pos + 1) * round(parent.width / 8px) * 1px - width / 2
                        : note.scale_pos * round(parent.width / 8px) * 1px;
                    width: is_black
                        ? parent.width / 8 * 0.8
                        : round(parent.width / 8px) * 1px + 1px;

                    height: is_black ? 60% : 100%;
                    highlighted: note.active;
                    clicked => { root.note_pressed(note.note_number); }
                }
        }
    }
}

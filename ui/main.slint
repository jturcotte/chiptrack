// Copyright Â© 2021 Jocelyn Turcotte <turcotte.j@gmail.com>
// SPDX-License-Identifier: MIT

import { Button, ComboBox, GridBox, HorizontalBox, VerticalBox
} from "std-widgets.slint";
import { OverlayDialog } from "overlay_dialog.slint";

struct Settings := {
    sync_enabled: bool,
}
export global SettingsGlobal := {
    property<Settings> settings: { sync_enabled: false, };
    callback settings_changed(Settings);
}

struct SongPatternData := {
    number: int,
    active: bool,
}
struct PatternData := {
    empty: bool,
    active: bool,
}
struct StepData := {
    empty: bool,
    active: bool,
    note_name: string,
}
struct InstrumentData := {
    id: string,
    selected: bool,
    active: bool,
}
struct NoteData := {
    note_number: int,
    key_pos: int,
    is_black: bool,
    active: bool,
}
struct ChannelTraceNote := {
    tick_number: int,
    octave: int,
    key_pos: int,
    is_black: bool,
    volume: float,
    color: color,
}
struct ChannelActiveNote := {
    trace: ChannelTraceNote,
    note_name: string,
}

SongPattern := Rectangle {
    callback clicked();
    property<int> number: 0;
    property<bool> highlighted;
    background: white;
    border_width: 1px;
    border_color: highlighted ? black : #a0a0a0;
    border_radius: width/8;
    Text {
        text: "P" + (number + 1);
        width: 100%;
        height: 100%;
        font_size: min(width, height) / 2.5;
        color: highlighted ? #505050 : #a0a0a0;
        horizontal_alignment: center;
        vertical_alignment: center;
    }
    TouchArea {
        width: 100%;
        height: 100%;
        clicked => { root.clicked(); }
    }
}

SequencerPattern := Rectangle {
    callback clicked();
    property<int> number: 0;
    property<bool> highlighted;
    property<bool> empty;
    background: empty ? white : #c0c0c0;
    border_width: 1px;
    border_color: highlighted ? black : #a0a0a0;
    border_radius: width/8;
    Text {
        text: "P" + (number + 1);
        width: 100%;
        height: 100%;
        font_size: min(width, height) / 2.5;
        color: highlighted ? #505050 : #a0a0a0;
        horizontal_alignment: center;
        vertical_alignment: center;
    }
    TouchArea {
        width: 100%;
        height: 100%;
        clicked => { root.clicked(); }
    }
}

SequencerStep := Rectangle {
    callback clicked();
    property<bool> highlighted;
    property<bool> empty;
    property<string> name;
    property<bool> beat;
    background: empty ? white : #c0c0c0;
    border_width: beat || highlighted ? 2px : 1px;
    border_color: highlighted ? black : #a0a0a0;
    border_radius: width/8;
    Text {
        text: name;
        visible: !empty;
        width: 100%;
        height: 100%;
        font_size: width / 3;
        color: #505050;
        horizontal_alignment: center;
        vertical_alignment: center;
    }
    TouchArea {
        width: 100%;
        height: 100%;
        clicked => { root.clicked(); }
    }
}

PianoKey :=  Rectangle {
    property<bool> highlighted;
    property<bool> is_black: false;
    property<string> note_name;
    callback clicked();
    background: {
        if (is_black != highlighted) {
            black;
        } else {
            white;
        }
    };
    border_color: black;
    border_width: 1px;
    Text {
        text: note_name;
        width: 100%;
        height: 98%;
        font_size: width / 3;
        color: #505050;
        horizontal_alignment: center;
        vertical_alignment: bottom;
    }
    area := TouchArea {
        width: parent.width;
        height: parent.height;
        clicked => {
            root.clicked();
        }
    }
}

InstrumentButton := Rectangle {
    callback clicked();
    property<string> id;
    property<bool> highlighted;
    property<bool> active;
    width: height;
    background: active ? #e0e0e0 : white;
    border_color: highlighted ? black : #a0a0a0;
    border_width: 1px;
    border_radius: width/16;
    Text {
        text: id;
        width: 100%;
        height: 100%;
        font_size: height / 3;
        horizontal_alignment: center;
        vertical_alignment: center;
    }
    TouchArea {
        width: 100%;
        height: 100%;
        clicked => { root.clicked(); }
    }
}

OctaveIndicator := Rectangle {
    border_width: 1px;
    border_color: black;
    background: white;
    Rectangle {
        background: black;
        y: 1 * parent.height / 7px * 1px - height / 2;
        height: parent.height / 7 * 0.8;
        width: 60%;
    }
    Rectangle {
        background: black;
        y: 2 * parent.height / 7px * 1px - height / 2;
        height: parent.height / 7 * 0.8;
        width: 60%;
    }
    Rectangle {
        background: black;
        y: 3 * parent.height / 7px * 1px - height / 2;
        height: parent.height / 7 * 0.8;
        width: 60%;
    }
    Rectangle {
        background: black;
        y: 5 * parent.height / 7px * 1px - height / 2;
        height: parent.height / 7 * 0.8;
        width: 60%;
    }
    Rectangle {
        background: black;
        y: 6 * parent.height / 7px * 1px - height / 2;
        height: parent.height / 7 * 0.8;
        width: 60%;
    }
}

MainWindow := Window {
    property<[SongPatternData]> sequencer_song_patterns: [
        {number: 0},
        {number: 1},
        {number: 0},
        {number: 1},
        {number: 0, active: true},
        {number: 1},
        {number: 2},
        {number: 3}];
    property<[PatternData]> sequencer_patterns: [
        {empty: true, active: true},
        {empty: true}, {empty: true}, {empty: true},
        {empty: true}, {empty: true}, {empty: true}, {empty: true},
        {empty: true}, {empty: true}, {empty: true}, {empty: true},
        {empty: true}, {empty: true}, {empty: true}, {empty: true},
        ];
    property<[StepData]> sequencer_steps: [
        {empty: false, note_name: "C-4"}, {empty: true}, {empty: true}, {empty: true},
        {empty: false, note_name: "C-4"}, {empty: true}, {empty: true}, {empty: true},
        {empty: false, note_name: "C-4"}, {empty: true}, {empty: true}, {empty: true},
        {empty: false, note_name: "C-4"}, {empty: true}, {empty: true}, {empty: true}];
    property<[InstrumentData]> instruments: [
        {active: false}, {active: false}, {active: false}, {active: false},
        {active: false}, {active: false}, {active: false}, {active: false},
        {active: false}, {active: false}, {active: false}, {active: false},
        {active: false}, {active: false}, {active: false}, {active: false},
        ];
    property<int> first_note: 60;
    property<[NoteData]> notes: [
        {note_number: first_note, key_pos: 0, is_black: false, active: false},
        {note_number: first_note + 2, key_pos: 1, is_black: false, active: false},
        {note_number: first_note + 4, key_pos: 2, is_black: false, active: false},
        {note_number: first_note + 5, key_pos: 3, is_black: false, active: false},
        {note_number: first_note + 7, key_pos: 4, is_black: false, active: false},
        {note_number: first_note + 9, key_pos: 5, is_black: false, active: false},
        {note_number: first_note + 11, key_pos: 6, is_black: false, active: false},
        {note_number: first_note + 12, key_pos: 7, is_black: false, active: false},
        {note_number: first_note + 1, key_pos: 0, is_black: true, active: false},
        {note_number: first_note + 3, key_pos: 1, is_black: true, active: false},
        {note_number: first_note + 6, key_pos: 3, is_black: true, active: false},
        {note_number: first_note + 8, key_pos: 4, is_black: true, active: false},
        {note_number: first_note + 10, key_pos: 5, is_black: true, active: false},
    ];
    property<int> current_tick_number: 123;
    property<[ChannelTraceNote]> synth_trace_notes: [
        { tick_number: 123, octave: 3, key_pos: 0, is_black: false, volume: 1.0, color: Colors.rgb(255,0,0), },
        { tick_number: 123, octave: 3, key_pos: 3, is_black: true, volume: 1.0, color: Colors.rgb(255,0,0), },
        { tick_number: 122, octave: 3, key_pos: 0, is_black: false, volume: 1.0, color: Colors.rgb(255,0,0), },
        { tick_number: 121, octave: 3, key_pos: 0, is_black: false, volume: 1.0, color: Colors.rgb(255,0,0), },
    ];
    property<[ChannelActiveNote]> synth_active_notes: [
        { trace: { tick_number: 123, octave: 3, key_pos: 0, is_black: false, volume: 1.0, color: Colors.rgb(255,0,0), }, note_name: "C", },
        { trace: { tick_number: 123, octave: 3, key_pos: 3, is_black: true, volume: 1.0, color: Colors.rgb(255,0,0), }, note_name: "F#", },
    ];
    property<bool> playing: false;
    property in_song_mode <=> song_mode_button.toggled;
    callback get_midi_note_name(int) -> string;
    callback mod(float, float) -> float;

    callback note_pressed(int);
    callback note_released(int);
    callback octave_increased(int);
    callback select_instrument(int);
    callback pattern_clicked(int);
    callback step_clicked(int);
    callback manually_advance_step(bool);
    callback play_clicked(bool);
    callback record_clicked(bool);
    callback append_song_pattern(int);
    callback remove_last_song_pattern();
    callback clear_song_patterns();
    callback save_project();
    callback mute_instruments();
    callback global_key_event(string, bool);

    property<bool> waveform_is_zero: true;
    property waveform_image <=> waveform.source;
    property<length> waveform_width: waveform.width;
    property<length> waveform_height: waveform.height;

    preferred_width: 800px;
    preferred_height: 480px;

    forward_focus: key_handler;
    key_handler := FocusScope {
        key-pressed(event) => {
            if (event.modifiers.control) {
                if (event.text == "s") { save_project(); }
                else if (event.text == "1") { root.pattern_clicked(0); }
                else if (event.text == "2") { root.pattern_clicked(1); }
                else if (event.text == "3") { root.pattern_clicked(2); }
                else if (event.text == "4") { root.pattern_clicked(3); }
                else if (event.text == "5") { root.pattern_clicked(4); }
                else if (event.text == "6") { root.pattern_clicked(5); }
                else if (event.text == "7") { root.pattern_clicked(6); }
                else if (event.text == "8") { root.pattern_clicked(7); }
                else if (event.text == "9") { root.pattern_clicked(8); }
                else if (event.text == "0") { root.pattern_clicked(9); }
            } else {
                if (event.text == "a") { note_pressed(first_note); }
                else if (event.text == "s") { note_pressed(first_note + 2); }
                else if (event.text == "d") { note_pressed(first_note + 4); }
                else if (event.text == "f") { note_pressed(first_note + 5); }
                else if (event.text == "g") { note_pressed(first_note + 7); }
                else if (event.text == "h") { note_pressed(first_note + 9); }
                else if (event.text == "j") { note_pressed(first_note + 11); }
                else if (event.text == "k") { note_pressed(first_note + 12); }
                else if (event.text == "w") { note_pressed(first_note + 1); }
                else if (event.text == "e") { note_pressed(first_note + 3); }
                else if (event.text == "t") { note_pressed(first_note + 6); }
                else if (event.text == "y") { note_pressed(first_note + 8); }
                else if (event.text == "u") { note_pressed(first_note + 10); }
                else if (event.text == "1") { root.select_instrument(0); }
                else if (event.text == "2") { root.select_instrument(1); }
                else if (event.text == "3") { root.select_instrument(2); }
                else if (event.text == "4") { root.select_instrument(3); }
                else if (event.text == "5") { root.select_instrument(4); }
                else if (event.text == "6") { root.select_instrument(5); }
                else if (event.text == "7") { root.select_instrument(6); }
                else if (event.text == "8") { root.select_instrument(7); }
                else if (event.text == "9") { root.select_instrument(8); }
                else if (event.text == "0") { root.select_instrument(9); }
                else if (event.text == Keys.LeftArrow) { root.manually_advance_step(false); }
                else if (event.text == Keys.RightArrow) { root.manually_advance_step(true); }
                else if (event.text == Keys.PageDown) { root.octave_increased(-1); }
                else if (event.text == Keys.PageUp) { root.octave_increased(1); }
                else if (event.text == Keys.Tab) { song_mode_button.toggled = !song_mode_button.toggled; }
                else if (event.text == Keys.Return) { root.play_clicked(!root.playing); }
                else if (event.text == Keys.Escape) { root.mute_instruments(); }
            }
            global_key_event(event.text, true);
            accept
        }
        key-released(event) => {
            global_key_event(event.text, false);
            accept
        }

        HorizontalBox {
            controls_scroll_area := Rectangle {
                VerticalBox {
                    property<length> not_song_mode_y: 0;
                    property<length> song_mode_y: controls_scroll_area.height * -0.4 - spacing;
                    y: in_song_mode ? song_mode_y : not_song_mode_y;
                    animate y { duration: 125ms; }
                    padding: 0;

                    if (y == song_mode_y): Rectangle { height: 40%; }
                    if (y != song_mode_y):
                    GridBox {
                        height: (controls_scroll_area.height - parent.spacing) * 0.4;
                        padding: 0;

                        Row {
                            HorizontalLayout {
                                spacing: 2px;

                                for pattern[idx] in sequencer_patterns:
                                SequencerPattern {
                                    number: idx;
                                    highlighted: pattern.active;
                                    empty: pattern.empty;
                                    clicked => { root.pattern_clicked(idx); }
                                }
                            }
                        }
                        Row {
                            HorizontalLayout {
                                spacing: 2px;

                                for step[idx] in sequencer_steps:
                                SequencerStep {
                                    highlighted: step.active;
                                    empty: step.empty;
                                    name: step.note_name;
                                    beat: mod(idx, 4) == 0;
                                    clicked => { root.step_clicked(idx); }
                                }
                            }
                        }
                    }

                    HorizontalBox {
                        height: (controls_scroll_area.height - parent.spacing) * 0.6;
                        padding: 0;

                        Rectangle {
                            property<float> piano_opacity: !in_song_mode ? 1.0 : 0.0;
                            animate piano_opacity { duration: 125ms; }
                            if (piano_opacity != 0.0):
                            Rectangle {
                                opacity: parent.piano_opacity;
                                for note[idx] in notes:
                                PianoKey {
                                    note_name: idx == 0 ? get_midi_note_name(note.note_number) : "";
                                    is_black: note.is_black;
                                    x: note.is_black
                                        ? (note.key_pos + 1) * floor(parent.width / 8px) * 1px - width / 2
                                        : note.key_pos * floor(parent.width / 8px) * 1px;
                                    width: is_black
                                        ? parent.width / 8 * 0.8
                                        : floor(parent.width / 8px) * 1px + 1px;

                                    height: is_black ? 60% : 100%;
                                    highlighted: note.active;
                                    clicked => { root.note_pressed(note.note_number); }
                                }
                            }
                            if (piano_opacity != 1.0):
                            VerticalLayout {
                                opacity: 1.0 - parent.piano_opacity;
                                visualization := Rectangle {
                                    property<int> visible_octaves: 4;
                                    property<length> note_height: height / (7 * visible_octaves + 2);
                                    // One note spacer, and the real note
                                    property<length> noise_area_height: note_height * 2;

                                    background: #f8f8f8;
                                    border_width: 1px;
                                    border_color: #e8e8e8;

                                    HorizontalLayout {
                                        Rectangle {
                                            z: 1;
                                            width: 5%;

                                            for i in visualization.visible_octaves:
                                            OctaveIndicator {
                                                width: 100%;
                                                height: visualization.note_height * 7;
                                                y: parent.height - visualization.noise_area_height - height * (i + 1);
                                            }

                                            for note[idx] in synth_active_notes:
                                            Rectangle {
                                                border-radius: width;
                                                width: height;
                                                height: visualization.note_height * 3;
                                                x: (note.trace.is_black ? parent.width * 0.6 : parent.width) - width / 2;
                                                y: parent.height
                                                    - (note.trace.octave == 0 && note.trace.key_pos == 0
                                                        ? visualization.note_height
                                                        : visualization.noise_area_height
                                                            + ((note.trace.octave - 2) * 7 + note.trace.key_pos + (note.trace.is_black ? 1.5 : 1)) * visualization.note_height
                                                        )
                                                    + visualization.note_height / 2 - height / 2;
                                                background: white;
                                                border-color: note.trace.color;
                                                border-width: 2px;
                                                Text {
                                                    width: 100%;
                                                    height: 100%;
                                                    text: note.note_name;
                                                    font_size: min(width, height) / 2.5;
                                                    color: note.trace.color;
                                                    horizontal_alignment: center;
                                                    vertical_alignment: center;
                                                }
                                            }
                                        }
                                        trace_container := Rectangle {
                                            property<length> tick_width: width / (6 * 16 * 2);
                                            Rectangle {
                                                // FIXME: current_tick_number is updated 64x per second, so this will cause jitter
                                                //        of the scroll animation when we scroll 2 ticks over a frame.
                                                //        Ideally we should animate this to scroll 64 ticks over a whole
                                                //        second instead, but I don't know any way to do this with the
                                                //        current API.
                                                x: current_tick_number * trace_container.tick_width;

                                                for note[idx] in synth_trace_notes:
                                                Rectangle {
                                                    width: trace_container.tick_width;
                                                    height: visualization.note_height * (note.is_black ? 0.8 : 1.0);
                                                    x: -note.tick_number * width;
                                                    y: parent.height
                                                        - (note.octave == 0 && note.key_pos == 0
                                                            ? visualization.note_height
                                                            : visualization.noise_area_height + ((note.octave - 2) * 7 + note.key_pos + (note.is_black ? 1.5 : 1)) * visualization.note_height
                                                            );
                                                    background: note.color;
                                                    opacity: note.volume;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        VerticalBox {
                            padding: 0;
                            Rectangle {
                                background: white;
                                waveform := Image {
                                    width: 100%;
                                    height: 100%;
                                    image-rendering: pixelated;
                                }
                                Rectangle {
                                    border_color: black;
                                    border_width: 1px;
                                    border_radius: height/16;
                                }
                                // This wouldn't be necessary if instruments_grid defined its
                                // height as a percentage, but I couldn't find a way to make one depend
                                // on grid_size.
                                vertical-stretch: 1 - instruments_grid.vertical_stretch;

                            }
                            instruments_grid := Rectangle {
                                property<length> spacing: 5px;
                                property<int> grid_size: 4;
                                property<length> item_size: (width - (spacing * (grid_size - 1))) / grid_size;
                                vertical-stretch: (grid_size / (grid_size + 1));
                                width: height;
                                for instrument[idx] in instruments:
                                InstrumentButton {
                                    id: instrument.id;
                                    highlighted: instrument.selected;
                                    active: instrument.active;
                                    clicked => { root.select_instrument(idx); }
                                    x: mod(idx, 4) * (width + parent.spacing);
                                    y: floor(idx / 4) * (height + parent.spacing);
                                    height: parent.item_size;
                                }
                            }
                        }
                    }

                    if (y == not_song_mode_y): Rectangle { height: 40%; }
                    if (y != not_song_mode_y):                
                    VerticalBox {
                        height: (controls_scroll_area.height - parent.spacing) * 0.4;
                        padding: 0;

                        HorizontalLayout {
                            spacing: 2px;

                            for pattern[idx] in sequencer_song_patterns:
                            SongPattern {
                                number: pattern.number;
                                highlighted: pattern.active;
                                // width: (parent.width - (parent.spacing * 15)) / 16;
                            }
                        }
                        HorizontalLayout {
                            spacing: 2px;

                            for pattern[idx] in sequencer_patterns:
                            SequencerPattern {
                                number: idx;
                                highlighted: pattern.active;
                                empty: pattern.empty;
                                clicked => { root.append_song_pattern(idx); }
                            }
                        }
                        HorizontalBox {
                            height: 25%;
                            padding: 0;

                            Button {
                                text: "â«";
                                clicked => { root.remove_last_song_pattern(); }
                            }
                            Button {
                                text: "Clear";
                                clicked => { root.clear_song_patterns(); }
                            }
                        }
                    }
                }
            }
            VerticalBox {
                width: min_width;
                padding: 0;

                settings_button := Button {
                    text: "â";
                    clicked => {
                        root.show_settings = true;
                    }
                }
                song_mode_button := Button {
                    property<bool> toggled: false;
                    text: toggled ? "â¦" : "â¤";
                    clicked => {
                        toggled = !toggled;
                    }
                }
                // placeholder to align with the 60% split left pane.
                Button {}
                play_button := Button {
                    text: root.playing ? "â¹" : "â¶";
                    clicked => {
                        root.play_clicked(!root.playing);
                    }
                }
                record_button := Button {
                    property<bool> toggled: true;
                    text: toggled ? "â¬¤" : "â¯";
                    clicked => {
                        toggled = !toggled;
                        root.record_clicked(toggled);
                    }
                }
            }
        }
    }

    property<bool> show_settings: false;
    if show_settings: OverlayDialog {
        accepted => {
            SettingsGlobal.settings.sync_enabled = sync_control.current_value != "Off";
            SettingsGlobal.settings_changed(SettingsGlobal.settings);
            show_settings = false;
        }
        GridBox {
            spacing: 24px;
            Row {
                Text {
                    text: "Settings";
                    font_size: 24px;
                }
            }
            Row {
                Text {
                    vertical_alignment: center;
                    text: "Sync Mode";
                }
                sync_control := ComboBox {
                    model: ["Off", "PO SY1 (master, left channel is 2 PPQN)"];
                    current_value: SettingsGlobal.settings.sync_enabled ? "PO SY1 (master, left channel is 2 PPQN)" : "Off";
                }
            }
        }
    }
}

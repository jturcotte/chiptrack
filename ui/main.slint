// Copyright © 2021 Jocelyn Turcotte <turcotte.j@gmail.com>
// SPDX-License-Identifier: MIT

import {
    ComboBox,
    GridBox,
    HorizontalBox,
    VerticalBox
} from "std-widgets.slint";

import {
    GlobalUI
} from "common.slint";

import {
    NoteData,
    GlobalSettings,
    GlobalEngine,
    GlobalUtils
} from "globals.slint";

import { ToolbarButton } from "widgets.slint";
import { PatternsPanel } from "patterns.slint";
import { InstrumentsPanel } from "instruments.slint";
import { SettingsDialog } from "settings_dialog.slint";
import { Piano } from "piano.slint";
import { Visualization } from "visualization.slint";

export {
    GlobalSettings,
    GlobalEngine,
    GlobalUI,
    GlobalUtils
}

import "fonts/BigBlue_TerminalPlus.ttf";

export component MainWindow inherits Window {
    in-out property<int> first_note: 60;
    in-out property<[NoteData]> notes: [
        {note_number: first_note, key_pos: 0, is_black: false, active: false},
        {note_number: first_note + 2, key_pos: 1, is_black: false, active: false},
        {note_number: first_note + 4, key_pos: 2, is_black: false, active: false},
        {note_number: first_note + 5, key_pos: 3, is_black: false, active: false},
        {note_number: first_note + 7, key_pos: 4, is_black: false, active: false},
        {note_number: first_note + 9, key_pos: 5, is_black: false, active: false},
        {note_number: first_note + 11, key_pos: 6, is_black: false, active: false},
        {note_number: first_note + 12, key_pos: 7, is_black: false, active: false},
        {note_number: first_note + 1, key_pos: 0, is_black: true, active: false},
        {note_number: first_note + 3, key_pos: 1, is_black: true, active: false},
        {note_number: first_note + 6, key_pos: 3, is_black: true, active: false},
        {note_number: first_note + 8, key_pos: 4, is_black: true, active: false},
        {note_number: first_note + 10, key_pos: 5, is_black: true, active: false},
    ];
    in-out property<bool> playing: false;

    callback octave_increased(int);
    callback global_key_event(string, bool) -> bool;

    in-out property<bool> waveform_is_zero: true;
    in-out property waveform_image <=> waveform.source;
    out property<length> waveform_width: waveform.width;
    out property<length> waveform_height: waveform.height;

    preferred_width: 800px;
    preferred_height: 480px;
    title: "Chiptrack";
    default_font_family: "BigBlue TerminalPlus";

    function root_key_pressed(event: KeyEvent) -> EventResult {
        if (event.modifiers.control && event.text == "s") { GlobalEngine.save_project(); }
        else if (event.modifiers.control && event.text == "g") { GlobalEngine.export_project_as_gba_sav(); }
        else if (event.modifiers.control && event.text == "1") { GlobalEngine.pattern_clicked(0); }
        else if (event.modifiers.control && event.text == "2") { GlobalEngine.pattern_clicked(1); }
        else if (event.modifiers.control && event.text == "3") { GlobalEngine.pattern_clicked(2); }
        else if (event.modifiers.control && event.text == "4") { GlobalEngine.pattern_clicked(3); }
        else if (event.modifiers.control && event.text == "5") { GlobalEngine.pattern_clicked(4); }
        else if (event.modifiers.control && event.text == "6") { GlobalEngine.pattern_clicked(5); }
        else if (event.modifiers.control && event.text == "7") { GlobalEngine.pattern_clicked(6); }
        else if (event.modifiers.control && event.text == "8") { GlobalEngine.pattern_clicked(7); }
        else if (event.modifiers.control && event.text == "9") { GlobalEngine.pattern_clicked(8); }
        else if (event.modifiers.control && event.text == "0") { GlobalEngine.pattern_clicked(9); }
        else if (event.text == "a") { GlobalEngine.note_key_pressed(first_note); }
        else if (event.text == "s") { GlobalEngine.note_key_pressed(first_note + 2); }
        else if (event.text == "d") { GlobalEngine.note_key_pressed(first_note + 4); }
        else if (event.text == "f") { GlobalEngine.note_key_pressed(first_note + 5); }
        else if (event.text == "g") { GlobalEngine.note_key_pressed(first_note + 7); }
        else if (event.text == "h") { GlobalEngine.note_key_pressed(first_note + 9); }
        else if (event.text == "j") { GlobalEngine.note_key_pressed(first_note + 11); }
        else if (event.text == "k") { GlobalEngine.note_key_pressed(first_note + 12); }
        else if (event.text == "w") { GlobalEngine.note_key_pressed(first_note + 1); }
        else if (event.text == "e") { GlobalEngine.note_key_pressed(first_note + 3); }
        else if (event.text == "t") { GlobalEngine.note_key_pressed(first_note + 6); }
        else if (event.text == "y") { GlobalEngine.note_key_pressed(first_note + 8); }
        else if (event.text == "u") { GlobalEngine.note_key_pressed(first_note + 10); }
        else if (event.text == "1") { GlobalEngine.select_instrument(0); }
        else if (event.text == "2") { GlobalEngine.select_instrument(1); }
        else if (event.text == "3") { GlobalEngine.select_instrument(2); }
        else if (event.text == "4") { GlobalEngine.select_instrument(3); }
        else if (event.text == "5") { GlobalEngine.select_instrument(4); }
        else if (event.text == "6") { GlobalEngine.select_instrument(5); }
        else if (event.text == "7") { GlobalEngine.select_instrument(6); }
        else if (event.text == "8") { GlobalEngine.select_instrument(7); }
        else if (event.text == "9") { GlobalEngine.select_instrument(8); }
        else if (event.text == "0") { GlobalEngine.select_instrument(9); }
        else if (event.text == Key.LeftArrow) { GlobalEngine.cycle_pattern_instrument(false); }
        else if (event.text == Key.RightArrow) { GlobalEngine.cycle_pattern_instrument(true); }
        else if (event.text == Key.PageDown) { root.octave_increased(-1); }
        else if (event.text == Key.PageUp) { root.octave_increased(1); }
        else if (event.text == Key.Return) { GlobalEngine.play_clicked(!root.playing); }
        else if (event.text == Key.Escape) { GlobalEngine.mute_instruments(); }
        else {
            return global_key_event(event.text, true) ? accept : reject;
        }
        accept
    }
    function root_key_released(event: KeyEvent) -> EventResult {
        global_key_event(event.text, false) ? accept : reject
    }

    forward_focus: patterns;
    HorizontalBox {
        VerticalBox {
            horizontal-stretch: 1;
            padding: 0;
            patterns := PatternsPanel {
                width: self.height * 1.4;
                root_key_pressed(event) => { root.root_key_pressed(event) }
                root_key_released(event) => { root.root_key_released(event) }
                padding: 0;
            }
            Piano {
                height: 30%;
                notes: root.notes;
            }
        }

        VerticalBox {
            horizontal-stretch: 1;
            padding: 0;
            Visualization { }
            Rectangle {
                height: 30%;
                background: white;
                waveform := Image {
                    width: 100%;
                    height: 100%;
                    image-rendering: pixelated;
                }
                Rectangle {
                    border_color: black;
                    border_width: 1px;
                    border_radius: self.height/16;
                }
            }
        }

        VerticalBox {
            width: self.min_width;
            padding: 0;

            settings_button := ToolbarButton {
                text: "⚙";
                clicked => {
                    root.show_settings = true;
                }
            }
            song_mode_button := ToolbarButton {
                text: GlobalUI.song_mode ? "▩" : "▨";
                clicked => {
                    GlobalUI.song_mode = !GlobalUI.song_mode;
                }
            }
            ToolbarButton {
                text: GlobalUI.instruments_grid ? "▦" : "▤";
                clicked => {
                    GlobalUI.instruments_grid = !GlobalUI.instruments_grid;
                }
            }
            play_button := ToolbarButton {
                text: root.playing ? "■" : "▶";
                clicked => {
                    GlobalEngine.play_clicked(!root.playing);
                }
            }
            record_button := ToolbarButton {
                property<bool> toggled: true;
                text: toggled ? "⬤" : "◯";
                text_color: toggled ? darkred : black;
                clicked => {
                    toggled = !toggled;
                    GlobalEngine.record_clicked(toggled);
                }
            }
        }
    }

    property<bool> show_settings: false;
    if show_settings: SettingsDialog {
        closed => {
            show_settings = false;
        }
    }
}

// Copyright © 2021 Jocelyn Turcotte <turcotte.j@gmail.com>
// SPDX-License-Identifier: MIT

import {
    HorizontalBox,
    VerticalBox
} from "std-widgets.slint";

import {
    FocusedPanel,
    GlobalUI
} from "common.slint";

import {
    NoteData,
    GlobalSettings,
    GlobalEngine,
    GlobalUtils
} from "globals.slint";

import { ToolbarButton } from "widgets.slint";
import { PatternsPanel } from "patterns.slint";
import { SettingsDialog } from "settings_dialog.slint";
import { Piano } from "piano.slint";
import { Visualization } from "visualization.slint";

export {
    GlobalSettings,
    GlobalEngine,
    GlobalUI,
    GlobalUtils
}

import "fonts/BigBlue_TerminalPlus.ttf";

export component MainWindow inherits Window {
    in-out property<int> first_note: 60;
    in-out property<[NoteData]> notes: [
        {note_number: first_note, key_pos: 0, is_black: false, active: false},
        {note_number: first_note + 2, key_pos: 1, is_black: false, active: false},
        {note_number: first_note + 4, key_pos: 2, is_black: false, active: false},
        {note_number: first_note + 5, key_pos: 3, is_black: false, active: false},
        {note_number: first_note + 7, key_pos: 4, is_black: false, active: false},
        {note_number: first_note + 9, key_pos: 5, is_black: false, active: false},
        {note_number: first_note + 11, key_pos: 6, is_black: false, active: false},
        {note_number: first_note + 12, key_pos: 7, is_black: false, active: false},
        {note_number: first_note + 1, key_pos: 0, is_black: true, active: false},
        {note_number: first_note + 3, key_pos: 1, is_black: true, active: false},
        {note_number: first_note + 6, key_pos: 3, is_black: true, active: false},
        {note_number: first_note + 8, key_pos: 4, is_black: true, active: false},
        {note_number: first_note + 10, key_pos: 5, is_black: true, active: false},
        {note_number: first_note + 12 + 2, key_pos: 7 + 1, is_black: false, active: false},
        {note_number: first_note + 12 + 4, key_pos: 7 + 2, is_black: false, active: false},
        {note_number: first_note + 12 + 5, key_pos: 7 + 3, is_black: false, active: false},
        {note_number: first_note + 12 + 7, key_pos: 7 + 4, is_black: false, active: false},
        {note_number: first_note + 12 + 9, key_pos: 7 + 5, is_black: false, active: false},
        {note_number: first_note + 12 + 11, key_pos: 7 + 6, is_black: false, active: false},
        {note_number: first_note + 12 + 12, key_pos: 7 + 7, is_black: false, active: false},
        {note_number: first_note + 12 + 1, key_pos: 7 + 0, is_black: true, active: false},
        {note_number: first_note + 12 + 3, key_pos: 7 + 1, is_black: true, active: false},
        {note_number: first_note + 12 + 6, key_pos: 7 + 3, is_black: true, active: false},
        {note_number: first_note + 12 + 8, key_pos: 7 + 4, is_black: true, active: false},
        {note_number: first_note + 12 + 10, key_pos: 7 + 5, is_black: true, active: false},
    ];
    in-out property<bool> playing: false;

    callback octave_increased(int);
    callback global_key_event(string, bool) -> bool;
    pure callback animate_waveform(float, float, float) -> string;

    preferred_width: 800px;
    preferred_height: 480px;
    title: "Chiptrack";
    default_font_family: "BigBlue TerminalPlus";

    function root_key_pressed(event: KeyEvent) -> EventResult {
        debug("p", event);
        if (event.repeat) {
            // This eats every repeated key press, even those not handled here.
            return accept;
        }
        if (event.modifiers.control && event.text == "s") { GlobalEngine.save_project(); }
        else if (event.modifiers.control && event.text == "g") { GlobalEngine.export_project_as_gba_sav(); }
        else if (event.text == "a") { GlobalEngine.note_pressed(first_note); }
        else if (event.text == "s") { GlobalEngine.note_pressed(first_note + 2); }
        else if (event.text == "d") { GlobalEngine.note_pressed(first_note + 4); }
        else if (event.text == "f") { GlobalEngine.note_pressed(first_note + 5); }
        else if (event.text == "g") { GlobalEngine.note_pressed(first_note + 7); }
        else if (event.text == "h") { GlobalEngine.note_pressed(first_note + 9); }
        else if (event.text == "j") { GlobalEngine.note_pressed(first_note + 11); }
        else if (event.text == "k") { GlobalEngine.note_pressed(first_note + 12); }
        else if (event.text == "w") { GlobalEngine.note_pressed(first_note + 1); }
        else if (event.text == "e") { GlobalEngine.note_pressed(first_note + 3); }
        else if (event.text == "t") { GlobalEngine.note_pressed(first_note + 6); }
        else if (event.text == "y") { GlobalEngine.note_pressed(first_note + 8); }
        else if (event.text == "u") { GlobalEngine.note_pressed(first_note + 10); }
        else if (event.text == "1") { GlobalEngine.select_instrument(0); }
        else if (event.text == "2") { GlobalEngine.select_instrument(1); }
        else if (event.text == "3") { GlobalEngine.select_instrument(2); }
        else if (event.text == "4") { GlobalEngine.select_instrument(3); }
        else if (event.text == "5") { GlobalEngine.select_instrument(4); }
        else if (event.text == "6") { GlobalEngine.select_instrument(5); }
        else if (event.text == "7") { GlobalEngine.select_instrument(6); }
        else if (event.text == "8") { GlobalEngine.select_instrument(7); }
        else if (event.text == "9") { GlobalEngine.select_instrument(8); }
        else if (event.text == "0") { GlobalEngine.select_instrument(9); }
        else if (event.modifiers.alt && event.text == Key.LeftArrow) { patterns.cycle_focus_panel(false, false); }
        else if (event.modifiers.alt && event.text == Key.RightArrow) { patterns.cycle_focus_panel(true, false); }
        else if (event.modifiers.shift && event.text == Key.Tab) { patterns.cycle_focus_panel(false, true); }
        else if (event.text == Key.Tab) { patterns.cycle_focus_panel(true, true); }
        else if (event.text == Key.LeftArrow) { GlobalEngine.cycle_pattern_instrument(false); }
        else if (event.text == Key.RightArrow) { GlobalEngine.cycle_pattern_instrument(true); }
        else if (event.text == Key.UpArrow) { GlobalEngine.select_next_song_pattern(false); }
        else if (event.text == Key.DownArrow) { GlobalEngine.select_next_song_pattern(true); }
        else if (event.text == Key.PageDown) { root.octave_increased(-1); }
        else if (event.text == Key.PageUp) { root.octave_increased(1); }
        else if (event.text == Key.Return) { GlobalEngine.play_clicked(!root.playing); }
        else if (event.text == Key.Escape) { GlobalEngine.mute_instruments(); }
        else {
            return global_key_event(event.text, true) ? accept : reject;
        }
        accept
    }
    function root_key_released(event: KeyEvent) -> EventResult {
        debug("r", event);
        if (event.text == "a") { GlobalEngine.note_released(first_note); }
        else if (event.text == "s") { GlobalEngine.note_released(first_note + 2); }
        else if (event.text == "d") { GlobalEngine.note_released(first_note + 4); }
        else if (event.text == "f") { GlobalEngine.note_released(first_note + 5); }
        else if (event.text == "g") { GlobalEngine.note_released(first_note + 7); }
        else if (event.text == "h") { GlobalEngine.note_released(first_note + 9); }
        else if (event.text == "j") { GlobalEngine.note_released(first_note + 11); }
        else if (event.text == "k") { GlobalEngine.note_released(first_note + 12); }
        else if (event.text == "w") { GlobalEngine.note_released(first_note + 1); }
        else if (event.text == "e") { GlobalEngine.note_released(first_note + 3); }
        else if (event.text == "t") { GlobalEngine.note_released(first_note + 6); }
        else if (event.text == "y") { GlobalEngine.note_released(first_note + 8); }
        else if (event.text == "u") { GlobalEngine.note_released(first_note + 10); }
        else {
            return global_key_event(event.text, false) ? accept : reject;
        }
        accept
    }

    forward_focus: patterns;
    HorizontalBox {
        VerticalBox {
            horizontal-stretch: 1;
            padding: 0;
            spacing: 0;
            HorizontalBox {
                padding: 0;
                patterns := PatternsPanel {
                    root_key_pressed(event) => { root.root_key_pressed(event) }
                    root_key_released(event) => { root.root_key_released(event) }
                    padding: 0;
                }
                Visualization { }
                VerticalBox {
                    width: self.min_width;
                    padding: 0;

                    settings_button := ToolbarButton {
                        text: "⚙";
                        clicked => {
                            root.show_settings = true;
                        }
                    }
                    ToolbarButton {
                        text: patterns.focused_panel == FocusedPanel.instruments ? "▦" : "▥";
                        clicked => {
                            patterns.toggle_instruments_grid();
                        }
                    }
                    play_button := ToolbarButton {
                        text: root.playing ? "■" : "▶";
                        clicked => {
                            GlobalEngine.play_clicked(!root.playing);
                        }
                    }
                    record_button := ToolbarButton {
                        property<bool> toggled: true;
                        text: toggled ? "⬤" : "◯";
                        text_color: toggled ? darkred : black;
                        clicked => {
                            toggled = !toggled;
                            GlobalEngine.record_clicked(toggled);
                        }
                    }
                }
            }
            Rectangle {
                height: 10%;

                Path {
                    commands: root.animate_waveform(animation_tick() / 1ms, self.viewbox-width, self.viewbox-height);
                    viewbox-width: (self.width - self.stroke-width) / 1px;
                    viewbox-height: (self.height - self.stroke-width) / 1px;
                    stroke: #333;
                    stroke-width: 1px;
                }

            }
            Piano {
                height: 30%;
                notes: root.notes;
            }
        }
    }

    property<bool> show_settings: false;
    if show_settings: SettingsDialog {
        closed => {
            show_settings = false;
        }
    }
}

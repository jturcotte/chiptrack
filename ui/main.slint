// Copyright © 2021 Jocelyn Turcotte <turcotte.j@gmail.com>
// SPDX-License-Identifier: MIT

import {
    HorizontalBox,
    VerticalBox, ScrollView
} from "std-widgets.slint";

import {
    FocusedPanel
} from "common.slint";

import {
    NoteData,
    GlobalSettings,
    GlobalEngine,
    GlobalUI,
    GlobalUtils
} from "globals.slint";

import { ToolbarButton } from "widgets.slint";
import { PatternsPanel } from "patterns.slint";
import { MenuDialog } from "menu_dialog.slint";
import { Piano } from "piano.slint";
import { Visualization } from "visualization.slint";

export {
    GlobalSettings,
    GlobalEngine,
    GlobalUI,
    GlobalUtils
}

import "fonts/BigBlue_TerminalPlus.ttf";

export component MainWindow inherits Window {
    in-out property<int> first_note: 60;
    in-out property<[NoteData]> notes: [
        {note_number: first_note, key_pos: 0, is_black: false, active: false},
        {note_number: first_note + 2, key_pos: 1, is_black: false, active: false},
        {note_number: first_note + 4, key_pos: 2, is_black: false, active: false},
        {note_number: first_note + 5, key_pos: 3, is_black: false, active: false},
        {note_number: first_note + 7, key_pos: 4, is_black: false, active: false},
        {note_number: first_note + 9, key_pos: 5, is_black: false, active: false},
        {note_number: first_note + 11, key_pos: 6, is_black: false, active: false},
        {note_number: first_note + 12, key_pos: 7, is_black: false, active: false},
        {note_number: first_note + 1, key_pos: 0, is_black: true, active: false},
        {note_number: first_note + 3, key_pos: 1, is_black: true, active: false},
        {note_number: first_note + 6, key_pos: 3, is_black: true, active: false},
        {note_number: first_note + 8, key_pos: 4, is_black: true, active: false},
        {note_number: first_note + 10, key_pos: 5, is_black: true, active: false},
        {note_number: first_note + 12 + 2, key_pos: 7 + 1, is_black: false, active: false},
        {note_number: first_note + 12 + 4, key_pos: 7 + 2, is_black: false, active: false},
        {note_number: first_note + 12 + 5, key_pos: 7 + 3, is_black: false, active: false},
        {note_number: first_note + 12 + 7, key_pos: 7 + 4, is_black: false, active: false},
        {note_number: first_note + 12 + 9, key_pos: 7 + 5, is_black: false, active: false},
        {note_number: first_note + 12 + 11, key_pos: 7 + 6, is_black: false, active: false},
        {note_number: first_note + 12 + 12, key_pos: 7 + 7, is_black: false, active: false},
        {note_number: first_note + 12 + 1, key_pos: 7 + 0, is_black: true, active: false},
        {note_number: first_note + 12 + 3, key_pos: 7 + 1, is_black: true, active: false},
        {note_number: first_note + 12 + 6, key_pos: 7 + 3, is_black: true, active: false},
        {note_number: first_note + 12 + 8, key_pos: 7 + 4, is_black: true, active: false},
        {note_number: first_note + 12 + 10, key_pos: 7 + 5, is_black: true, active: false},
    ];

    callback octave_increased(int);
    callback show_log_window();
    pure callback animate_waveform(float, float, float) -> [string];
    in property<bool> desktop_web: false;

    preferred_width: 800px;
    preferred_height: 480px;
    title: "Chiptrack";
    default_font_family: "BigBlue TerminalPlus";

    function root_key_pressed(e: KeyEvent) -> EventResult {
        if e.modifiers.control && e.text == "s" { if !e.repeat { GlobalEngine.save_project(); } }
        else if e.modifiers.control && e.text == "g" { if !e.repeat { GlobalEngine.export_project_as_gba_sav(); } }
        else if e.modifiers.control && e.text == "o" { if !e.repeat { GlobalEngine.open_file_dialog(); } }
        else if e.text == "a" { if !e.repeat { GlobalEngine.note_pressed(first_note); } }
        else if e.text == "s" { if !e.repeat { GlobalEngine.note_pressed(first_note + 2); } }
        else if e.text == "d" { if !e.repeat { GlobalEngine.note_pressed(first_note + 4); } }
        else if e.text == "f" { if !e.repeat { GlobalEngine.note_pressed(first_note + 5); } }
        else if e.text == "g" { if !e.repeat { GlobalEngine.note_pressed(first_note + 7); } }
        else if e.text == "h" { if !e.repeat { GlobalEngine.note_pressed(first_note + 9); } }
        else if e.text == "j" { if !e.repeat { GlobalEngine.note_pressed(first_note + 11); } }
        else if e.text == "k" { if !e.repeat { GlobalEngine.note_pressed(first_note + 12); } }
        else if e.text == "w" { if !e.repeat { GlobalEngine.note_pressed(first_note + 1); } }
        else if e.text == "e" { if !e.repeat { GlobalEngine.note_pressed(first_note + 3); } }
        else if e.text == "t" { if !e.repeat { GlobalEngine.note_pressed(first_note + 6); } }
        else if e.text == "y" { if !e.repeat { GlobalEngine.note_pressed(first_note + 8); } }
        else if e.text == "u" { if !e.repeat { GlobalEngine.note_pressed(first_note + 10); } }
        else if e.text == "1" { if !e.repeat { GlobalEngine.display_instrument(0); } }
        else if e.text == "2" { if !e.repeat { GlobalEngine.display_instrument(1); } }
        else if e.text == "3" { if !e.repeat { GlobalEngine.display_instrument(2); } }
        else if e.text == "4" { if !e.repeat { GlobalEngine.display_instrument(3); } }
        else if e.text == "5" { if !e.repeat { GlobalEngine.display_instrument(4); } }
        else if e.text == "6" { if !e.repeat { GlobalEngine.display_instrument(5); } }
        else if e.text == "7" { if !e.repeat { GlobalEngine.display_instrument(6); } }
        else if e.text == "8" { if !e.repeat { GlobalEngine.display_instrument(7); } }
        else if e.text == "9" { if !e.repeat { GlobalEngine.display_instrument(8); } }
        else if e.text == "0" { if !e.repeat { GlobalEngine.display_instrument(9); } }
        else if e.text == Key.Backspace { if !e.repeat { GlobalEngine.set_erasing(true); } }
        else if e.text == "." { if !e.repeat { GlobalEngine.record_clicked(!GlobalUI.recording); } }
        else if e.text == Key.Escape { if !e.repeat { GlobalEngine.mute_instruments(); } }
        else if e.modifiers.shift && e.text == Key.LeftArrow { patterns.cycle_panel_focus(false, false); }
        else if e.modifiers.shift && e.text == Key.RightArrow { patterns.cycle_panel_focus(true, false); }
        else if e.modifiers.shift && e.text == Key.Tab { patterns.cycle_panel_focus(false, true); }
        else if e.text == Key.Tab { patterns.cycle_panel_focus(true, true); }
        else if e.text == Key.LeftArrow { GlobalEngine.cycle_pattern_instrument(false); }
        else if e.text == Key.RightArrow { GlobalEngine.cycle_pattern_instrument(true); }
        else if e.text == Key.UpArrow { GlobalUI.select_next_song_pattern(false); }
        else if e.text == Key.DownArrow { GlobalUI.select_next_song_pattern(true); }
        else if e.text == Key.PageDown { root.octave_increased(-1); }
        else if e.text == Key.PageUp { root.octave_increased(1); }
        else if e.text == Key.Return && e.modifiers.control { GlobalUI.toggle_play(false); }
        else if e.text == Key.Return { GlobalUI.toggle_play(true); }
        else {
            return reject;
        }
        return accept;
    }
    function root_key_released(e: KeyEvent) -> EventResult {
        if e.text == "a" { GlobalEngine.note_released(first_note); }
        else if e.text == "s" { GlobalEngine.note_released(first_note + 2); }
        else if e.text == "d" { GlobalEngine.note_released(first_note + 4); }
        else if e.text == "f" { GlobalEngine.note_released(first_note + 5); }
        else if e.text == "g" { GlobalEngine.note_released(first_note + 7); }
        else if e.text == "h" { GlobalEngine.note_released(first_note + 9); }
        else if e.text == "j" { GlobalEngine.note_released(first_note + 11); }
        else if e.text == "k" { GlobalEngine.note_released(first_note + 12); }
        else if e.text == "w" { GlobalEngine.note_released(first_note + 1); }
        else if e.text == "e" { GlobalEngine.note_released(first_note + 3); }
        else if e.text == "t" { GlobalEngine.note_released(first_note + 6); }
        else if e.text == "y" { GlobalEngine.note_released(first_note + 8); }
        else if e.text == "u" { GlobalEngine.note_released(first_note + 10); }
        else if e.text == Key.Backspace { GlobalEngine.set_erasing(false); }
        else {
            return reject;
        }
        return accept;
    }

    forward_focus: patterns;
    HorizontalBox {
        VerticalBox {
            horizontal-stretch: 1;
            padding: 0;
            spacing: 0;
            HorizontalBox {
                padding: 0;
                patterns := PatternsPanel {
                    root_key_pressed(e) => { root.root_key_pressed(e) }
                    root_key_released(e) => { root.root_key_released(e) }
                    padding: 0;
                }
                Visualization { }
                VerticalBox {
                    width: self.min_width;
                    padding: 0;

                    settings_button := ToolbarButton {
                        text: "♦";
                        clicked => {
                            root.show_settings = true;
                        }
                    }
                    ToolbarButton {
                        text: patterns.focused_panel == FocusedPanel.instruments ? "≡" : "#";
                        clicked => {
                            patterns.toggle_instruments_grid();
                        }
                    }
                    play_button := ToolbarButton {
                        text: GlobalUI.playing ? "■" : "►";
                        clicked => {
                            // The button always does song mode playback
                            GlobalUI.toggle_play(/*song_mode*/ true);
                        }
                    }
                    record_button := ToolbarButton {
                        text: GlobalUI.recording ? "●" : "○";
                        text_color: GlobalUI.recording ? darkred : black;
                        clicked => {
                            GlobalEngine.record_clicked(!GlobalUI.recording);
                        }
                    }
                }
            }
            Rectangle {
                height: 10%;
                property<float> viewbox-width: (self.width - self.stroke-width) / 1px;
                property<float> viewbox-height: (self.height - self.stroke-width) / 1px;
                property<length> stroke-width: 1px;
                property<[color]> colors: [ #ddd, #ccc, #bbb, #fff ];
                property<[color]> strokes: [ #ccc, #bbb, #aaa, #000 ];
                property<[string]> waveforms: root.animate_waveform(animation_tick() / 1ms, self.viewbox-width, self.viewbox-height);

                for idx in waveforms.length:
                Path {
                    property<string> waveform: waveforms[waveforms.length - 1 - idx];
                    commands: waveform;
                    viewbox-width: parent.viewbox-width;
                    viewbox-height: parent.viewbox-height;
                    stroke-width: parent.stroke-width;
                    stroke: strokes[strokes.length - waveforms.length + idx];
                    fill: colors[colors.length - waveforms.length + idx];
                }
            }
            Piano {
                height: 30%;
                notes: root.notes;
            }
        }
    }

    property<bool> show_settings: false;
    if show_settings: MenuDialog {
        closed => {
            show_settings = false;
            patterns.restore_panel_focus();
        }
        show_log_window => { root.show_log_window(); }
        desktop_web: root.desktop_web;
        width: 100%;
        height: 100%;
    }
}

export component LogWindow inherits Window {
    in property log_text <=> t.text;
    default_font_family: "BigBlue TerminalPlus";
    ScrollView {
        viewport-width: t.preferred-width;
        viewport-height: t.preferred-height;
        // TODO: The scroll position only stay at the end until the user scrolls manually, to restore it I'd need
        //       some user-input callback that it was scrolled to the end and a way to set the binding again.
        viewport_y: self.height - self.viewport_height;

        t := TextInput {
            read_only: true;
            wrap: TextWrap.no-wrap;
            single-line: false;
        }
    }
}


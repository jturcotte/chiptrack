// Copyright © 2021 Jocelyn Turcotte <turcotte.j@gmail.com>
// SPDX-License-Identifier: MIT

import {
    Button,
    ComboBox,
    GridBox,
    HorizontalBox,
    VerticalBox
} from "std-widgets.slint";

import { OverlayDialog } from "overlay_dialog.slint";

import {
    SongPatternData,
    PatternData,
    StepData,
    InstrumentData,
    NoteData,
    ChannelTraceNote,
    ChannelActiveNote
} from "data.slint";

import {
    SequencerPattern,
    PatternsPanel
} from "patterns.slint";

import {
    Piano
} from "piano.slint";

import {
    Visualization
} from "visualization.slint";

import {
    GlobalSettings,
    GlobalUtils
} from "globals.slint";

export {
    GlobalSettings,
    GlobalUtils
}

SongPattern := Rectangle {
    callback clicked();
    property<int> number: 0;
    property<bool> highlighted;
    background: white;
    border_width: 1px;
    border_color: highlighted ? black : #a0a0a0;
    border_radius: width/8;
    Text {
        text: "P" + (number + 1);
        width: 100%;
        height: 100%;
        font_size: min(width, height) / 2.5;
        color: highlighted ? #505050 : #a0a0a0;
        horizontal_alignment: center;
        vertical_alignment: center;
    }
    TouchArea {
        width: 100%;
        height: 100%;
        clicked => { root.clicked(); }
    }
}

InstrumentButton := Rectangle {
    callback pressed();
    callback right_pressed();
    property<string> id;
    property<bool> highlighted;
    property<bool> active;
    property<bool> muted;
    width: height;
    background: active ? #e0e0e0 : white;
    border_color: highlighted ? black : #a0a0a0;
    border_width: 1px;
    border_radius: width/16;
    Text {
        text: muted ? "🔇" : id;
        width: 100%;
        height: 100%;
        font_size: height / 3;
        horizontal_alignment: center;
        vertical_alignment: center;
        color: muted ? #a0a0a0 : black;
    }
    TouchArea {
        width: 100%;
        height: 100%;
        pointer-event(e) => {
            if (e.kind == PointerEventKind.down) {
                if (e.button == PointerEventButton.left) {
                    root.pressed();
                } else if (e.button == PointerEventButton.right) {
                    root.right_pressed();
                }
            }
        }
    }
}

export MainWindow := Window {
    property<[SongPatternData]> sequencer_song_patterns: [
        {number: 0},
        {number: 1},
        {number: 0},
        {number: 1},
        {number: 0, active: true},
        {number: 1},
        {number: 2},
        {number: 3}];
    property<[PatternData]> sequencer_patterns: [
        {empty: true, active: true},
        {empty: true}, {empty: true}, {empty: true},
        {empty: true}, {empty: true}, {empty: true}, {empty: true},
        {empty: true}, {empty: true}, {empty: true}, {empty: true},
        {empty: true}, {empty: true}, {empty: true}, {empty: true},
        ];
    property<[StepData]> sequencer_steps: [
        {press: true, note_name: "C-4"},
        {press: false}, {press: false}, {press: false},
        {press: true, release: true, note_name: "C-4", active: true},
        {press: false}, {press: false}, {press: false},
        {press: true, note_name: "C-4"},
        {press: false}, {press: false}, {press: false},
        {press: false, release: true},
        {press: false}, {press: false}, {press: false}];
    property<[InstrumentData]> instruments: [
        {active: false}, {active: false}, {active: false}, {active: false},
        {active: false}, {active: false}, {active: false}, {active: false},
        {active: false}, {active: false}, {active: false}, {active: false},
        {active: false}, {active: false}, {active: false}, {active: false},
        ];
    property<int> first_note: 60;
    property<[NoteData]> notes: [
        {note_number: first_note, key_pos: 0, is_black: false, active: false},
        {note_number: first_note + 2, key_pos: 1, is_black: false, active: false},
        {note_number: first_note + 4, key_pos: 2, is_black: false, active: false},
        {note_number: first_note + 5, key_pos: 3, is_black: false, active: false},
        {note_number: first_note + 7, key_pos: 4, is_black: false, active: false},
        {note_number: first_note + 9, key_pos: 5, is_black: false, active: false},
        {note_number: first_note + 11, key_pos: 6, is_black: false, active: false},
        {note_number: first_note + 12, key_pos: 7, is_black: false, active: false},
        {note_number: first_note + 1, key_pos: 0, is_black: true, active: false},
        {note_number: first_note + 3, key_pos: 1, is_black: true, active: false},
        {note_number: first_note + 6, key_pos: 3, is_black: true, active: false},
        {note_number: first_note + 8, key_pos: 4, is_black: true, active: false},
        {note_number: first_note + 10, key_pos: 5, is_black: true, active: false},
    ];
    property<int> current_tick_number: 123;
    property<[ChannelTraceNote]> synth_trace_notes: [
        { tick_number: 123, octave: 3, key_pos: 0, is_black: false, volume: 1.0, color: Colors.rgb(255,0,0), },
        { tick_number: 123, octave: 3, key_pos: 3, is_black: true, volume: 1.0, color: Colors.rgb(255,0,0), },
        { tick_number: 122, octave: 3, key_pos: 0, is_black: false, volume: 1.0, color: Colors.rgb(255,0,0), },
        { tick_number: 121, octave: 3, key_pos: 0, is_black: false, volume: 1.0, color: Colors.rgb(255,0,0), },
    ];
    property<[ChannelActiveNote]> synth_active_notes: [
        { trace: { tick_number: 123, octave: 3, key_pos: 0, is_black: false, volume: 1.0, color: Colors.rgb(255,0,0), }, note_name: "C", },
        { trace: { tick_number: 123, octave: 3, key_pos: 3, is_black: true, volume: 1.0, color: Colors.rgb(255,0,0), }, note_name: "F#", },
    ];
    property<bool> playing: false;
    property in_song_mode <=> song_mode_button.toggled;

    callback note_key_pressed(int);
    callback note_pressed(int);
    callback note_released(int);
    callback octave_increased(int);
    callback select_instrument(int);
    callback toggle_mute_instrument(int);
    callback pattern_clicked(int);
    callback toggle_step(int);
    callback toggle_step_release(int);
    callback manually_advance_step(bool);
    callback play_clicked(bool);
    callback record_clicked(bool);
    callback append_song_pattern(int);
    callback remove_last_song_pattern();
    callback clear_song_patterns();
    callback save_project();
    callback mute_instruments();
    callback global_key_event(string, bool);

    property<bool> waveform_is_zero: true;
    property waveform_image <=> waveform.source;
    property<length> waveform_width: waveform.width;
    property<length> waveform_height: waveform.height;

    preferred_width: 800px;
    preferred_height: 480px;

    forward_focus: key_handler;
    key_handler := FocusScope {
        key-pressed(event) => {
            if (event.modifiers.control) {
                if (event.text == "s") { save_project(); }
                else if (event.text == "1") { root.pattern_clicked(0); }
                else if (event.text == "2") { root.pattern_clicked(1); }
                else if (event.text == "3") { root.pattern_clicked(2); }
                else if (event.text == "4") { root.pattern_clicked(3); }
                else if (event.text == "5") { root.pattern_clicked(4); }
                else if (event.text == "6") { root.pattern_clicked(5); }
                else if (event.text == "7") { root.pattern_clicked(6); }
                else if (event.text == "8") { root.pattern_clicked(7); }
                else if (event.text == "9") { root.pattern_clicked(8); }
                else if (event.text == "0") { root.pattern_clicked(9); }
            } else {
                if (event.text == "a") { note_key_pressed(first_note); }
                else if (event.text == "s") { note_key_pressed(first_note + 2); }
                else if (event.text == "d") { note_key_pressed(first_note + 4); }
                else if (event.text == "f") { note_key_pressed(first_note + 5); }
                else if (event.text == "g") { note_key_pressed(first_note + 7); }
                else if (event.text == "h") { note_key_pressed(first_note + 9); }
                else if (event.text == "j") { note_key_pressed(first_note + 11); }
                else if (event.text == "k") { note_key_pressed(first_note + 12); }
                else if (event.text == "w") { note_key_pressed(first_note + 1); }
                else if (event.text == "e") { note_key_pressed(first_note + 3); }
                else if (event.text == "t") { note_key_pressed(first_note + 6); }
                else if (event.text == "y") { note_key_pressed(first_note + 8); }
                else if (event.text == "u") { note_key_pressed(first_note + 10); }
                else if (event.text == "1") { root.select_instrument(0); }
                else if (event.text == "2") { root.select_instrument(1); }
                else if (event.text == "3") { root.select_instrument(2); }
                else if (event.text == "4") { root.select_instrument(3); }
                else if (event.text == "5") { root.select_instrument(4); }
                else if (event.text == "6") { root.select_instrument(5); }
                else if (event.text == "7") { root.select_instrument(6); }
                else if (event.text == "8") { root.select_instrument(7); }
                else if (event.text == "9") { root.select_instrument(8); }
                else if (event.text == "0") { root.select_instrument(9); }
                else if (event.text == Keys.LeftArrow) { root.manually_advance_step(false); }
                else if (event.text == Keys.RightArrow) { root.manually_advance_step(true); }
                else if (event.text == Keys.PageDown) { root.octave_increased(-1); }
                else if (event.text == Keys.PageUp) { root.octave_increased(1); }
                else if (event.text == Keys.Tab) { song_mode_button.toggled = !song_mode_button.toggled; }
                else if (event.text == Keys.Return) { root.play_clicked(!root.playing); }
                else if (event.text == Keys.Escape) { root.mute_instruments(); }
            }
            global_key_event(event.text, true);
            accept
        }
        key-released(event) => {
            global_key_event(event.text, false);
            accept
        }

        HorizontalBox {
            controls_scroll_area := Rectangle {
                VerticalBox {
                    property<length> not_song_mode_y: 0;
                    property<length> song_mode_y: controls_scroll_area.height * -0.4 - spacing;
                    y: in_song_mode ? song_mode_y : not_song_mode_y;
                    animate y { duration: 125ms; }
                    padding: 0;

                    if (y == song_mode_y): Rectangle { height: 40%; }
                    if (y != song_mode_y):
                    PatternsPanel {
                        height: (controls_scroll_area.height - parent.spacing) * 0.4;
                        padding: 0;

                        sequencer_patterns: root.sequencer_patterns;
                        sequencer_steps: root.sequencer_steps;
                        pattern_clicked(p) => { root.pattern_clicked(p); }
                        toggle_step(s) => { root.toggle_step(s); }
                        toggle_step_release(s) => { root.toggle_step_release(s); }
                    }

                    HorizontalBox {
                        height: (controls_scroll_area.height - parent.spacing) * 0.6;
                        padding: 0;

                        Rectangle {
                            property<float> piano_opacity: !in_song_mode ? 1.0 : 0.0;
                            animate piano_opacity { duration: 125ms; }
                            if (piano_opacity != 0.0):
                            Piano {
                                opacity: parent.piano_opacity;
                                notes: root.notes;
                                note_pressed(note) => { root.note_pressed(note); }
                                note_released(note) => { root.note_released(note); }
                            }
                            if (piano_opacity != 1.0):
                            Visualization {
                                opacity: 1.0 - parent.piano_opacity;
                                current_tick_number: root.current_tick_number;
                                synth_trace_notes: root.synth_trace_notes;
                                synth_active_notes: root.synth_active_notes;
                            }
                        }
                        VerticalBox {
                            padding: 0;
                            Rectangle {
                                background: white;
                                waveform := Image {
                                    width: 100%;
                                    height: 100%;
                                    image-rendering: pixelated;
                                }
                                Rectangle {
                                    border_color: black;
                                    border_width: 1px;
                                    border_radius: height/16;
                                }
                                // This wouldn't be necessary if instruments_grid defined its
                                // height as a percentage, but I couldn't find a way to make one depend
                                // on grid_size.
                                vertical-stretch: 1 - instruments_grid.vertical_stretch;

                            }
                            instruments_grid := Rectangle {
                                property<length> spacing: 5px;
                                property<int> grid_size: 4;
                                property<length> item_size: (width - (spacing * (grid_size - 1))) / grid_size;
                                vertical-stretch: (grid_size / (grid_size + 1));
                                width: height;
                                for instrument[idx] in instruments:
                                InstrumentButton {
                                    id: instrument.id;
                                    highlighted: instrument.selected;
                                    active: instrument.active;
                                    muted: instrument.muted;
                                    pressed => { root.select_instrument(idx); }
                                    right_pressed => { root.toggle_mute_instrument(idx); }
                                    x: GlobalUtils.mod(idx, 4) * (width + parent.spacing);
                                    y: floor(idx / 4) * (height + parent.spacing);
                                    height: parent.item_size;
                                }
                            }
                        }
                    }

                    if (y == not_song_mode_y): Rectangle { height: 40%; }
                    if (y != not_song_mode_y):                
                    VerticalBox {
                        height: (controls_scroll_area.height - parent.spacing) * 0.4;
                        padding: 0;

                        HorizontalLayout {
                            spacing: 2px;

                            for pattern[idx] in sequencer_song_patterns:
                            SongPattern {
                                number: pattern.number;
                                highlighted: pattern.active;
                                // width: (parent.width - (parent.spacing * 15)) / 16;
                            }
                        }
                        HorizontalLayout {
                            spacing: 2px;

                            for pattern[idx] in sequencer_patterns:
                            SequencerPattern {
                                number: idx;
                                highlighted: pattern.active;
                                empty: pattern.empty;
                                clicked => { root.append_song_pattern(idx); }
                            }
                        }
                        HorizontalBox {
                            height: 25%;
                            padding: 0;

                            Button {
                                text: "⌫";
                                clicked => { root.remove_last_song_pattern(); }
                            }
                            Button {
                                text: "Clear";
                                clicked => { root.clear_song_patterns(); }
                            }
                        }
                    }
                }
            }
            VerticalBox {
                width: min_width;
                padding: 0;

                settings_button := Button {
                    text: "⚙";
                    clicked => {
                        root.show_settings = true;
                    }
                }
                song_mode_button := Button {
                    property<bool> toggled: false;
                    text: toggled ? "▦" : "▤";
                    clicked => {
                        toggled = !toggled;
                    }
                }
                // placeholder to align with the 60% split left pane.
                Button {}
                play_button := Button {
                    text: root.playing ? "⏹" : "▶";
                    clicked => {
                        root.play_clicked(!root.playing);
                    }
                }
                record_button := Button {
                    property<bool> toggled: true;
                    text: toggled ? "⬤" : "◯";
                    clicked => {
                        toggled = !toggled;
                        root.record_clicked(toggled);
                    }
                }
            }
        }
    }

    property<bool> show_settings: false;
    if show_settings: OverlayDialog {
        accepted => {
            GlobalSettings.settings.sync_enabled = sync_control.current_value != "Off";
            GlobalSettings.settings_changed(GlobalSettings.settings);
            show_settings = false;
        }
        GridBox {
            spacing: 24px;
            Row {
                Text {
                    text: "Settings";
                    font_size: 24px;
                }
            }
            Row {
                Text {
                    vertical_alignment: center;
                    text: "Sync Mode";
                }
                sync_control := ComboBox {
                    model: ["Off", "PO SY1 (master, left channel is 2 PPQN)"];
                    current_value: GlobalSettings.settings.sync_enabled ? "PO SY1 (master, left channel is 2 PPQN)" : "Off";
                }
            }
        }
    }
}

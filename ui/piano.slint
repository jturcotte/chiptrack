// Copyright Â© 2021 Jocelyn Turcotte <turcotte.j@gmail.com>
// SPDX-License-Identifier: MIT

import { NoteData, GlobalEngine, GlobalUtils } from "globals.slint";

component PianoKey inherits Rectangle {
    in property<bool> highlighted;
    in property<bool> is_black: false;
    in property<string> note_name;
    callback pressed();
    callback released();
    background: {
        if (is_black != highlighted) {
            #333;
        } else {
            white;
        }
    };
    border_color: #333;
    border_width: 1px;
    Text {
        text: note_name;
        width: 100%;
        height: 98%;
        font_size: self.width / 3;
        color: #333;
        horizontal_alignment: center;
        vertical_alignment: bottom;
    }
    area := TouchArea {
        width: parent.width;
        height: parent.height;
        pointer-event(e) => {
            if (e.button == PointerEventButton.left) {
                if (e.kind == PointerEventKind.down) {
                    root.pressed();
                } else {
                    root.released();
                }
            }
        }
    }
}

export component Piano {
    in property<[NoteData]> notes;
    property<int> num_white_notes: Math.round(notes.length * 7 / 12);

    for note[idx] in notes:
    PianoKey {
        note_name: idx == 0 ? GlobalUtils.get_midi_note_name(note.note_number) : "";
        is_black: note.is_black;
        x: note.is_black
            ? (note.key_pos + 1) * floor(parent.width / 1px / num_white_notes) * 1px - parent.width / 15 * 0.8 / 2
            : note.key_pos * floor(parent.width / 1px / num_white_notes) * 1px;
        y: 0px;
        width: self.is_black
            ? parent.width / 15 * 0.8
            : (note.key_pos + 1 < num_white_notes
                ? floor(parent.width / 1px / num_white_notes) * 1px + 1px
                : parent.width - self.x);

        height: self.is_black ? 60% : 100%;
        highlighted: note.active;
        pressed => { GlobalEngine.note_pressed(note.note_number); }
        released => { GlobalEngine.note_released(note.note_number); }
    }
}

// Copyright Â© 2021 Jocelyn Turcotte <turcotte.j@gmail.com>
// SPDX-License-Identifier: MIT

export struct SongPatternData {
    number: int,
    // For range selection (not yet supported)
    selected: bool,
}
export struct PatternInstrumentData {
    id: string,
    // Internal sequencer name to avoid ambiguity, but same as instrument:u8 elsewhere.
    synth_index: int,
    notes: [int],
}
export struct StepData {
    press: bool,
    release: bool,
    note: int,
    param0_set: bool,
    param0_val: int,
    param1_set: bool,
    param1_val: int,
}
export struct InstrumentData {
    id: string,
    active: bool,
    muted: bool,
    // Those use i32::MIN to represent undefined since -1 is a valid i8 value
    param0: int,
    param1: int,
}
export struct ParamData {
    defined: bool,
    name: string,
}
export struct NoteData {
    note_number: int,
    key_pos: int,
    is_black: bool,
    active: bool,
}
export struct ChannelTraceNote {
    channel: int,
    start_tick: int,
    num_ticks: int,
    octave: int,
    key_pos: int,
    cent_adj: float,
    is_black: bool,
    volume: float,
}
export struct ChannelActiveNote {
    trace: ChannelTraceNote,
    note_name: string,
}
export struct Settings {
    sync_enabled: bool,
}
export struct SongSettings {
    frames_per_step: int,
}

// State shared by the desktop and gba UIs is put here in a
// global to avoid having to duplicate them in the separate root components.
export global GlobalUI {
    // param0, param1, press, release
    in-out property<int> selected_column: 2;
    // selected_column will be set to this when switching instrument, if it's available.
    in-out property<int> user_selected_column: 2;

    in-out property<int> selected_step_range_first: -1;
    // Also the last of the range when selected_step_range_first != -1
    in-out property<int> selected_step: 0;

    in-out property<bool> x_pressed: false;
    in-out property<bool> z_pressed: false;
    in-out property<KeyEvent> last_pressed_key;
    out property<bool> shift_pressed_something: false;
    out property<bool> z_pressed_something: false;
    in-out property<bool> z_press_handled: false;

    in-out property<bool> playing: false;
    in property<bool> recording: true;
    out property<bool> pin_selection_to_active: false;

    callback cycle_selected_column(/*forward*/ bool);

    public function adjust_user_selected_column() {
        if user_selected_column == 0 && !GlobalEngine.instrument_param_0.defined {
            selected_column = 2;
        } else if user_selected_column == 1 && !GlobalEngine.instrument_param_1.defined {
            selected_column = 2;
        } else {
            selected_column = user_selected_column;
        }
    }

    public function select_column(column: int) {
        user_selected_column = column;
        selected_column = column;
    }

    public function update_press_states(e: KeyEvent) {
        if (e.text == "x" || e.text == "X") && !e.repeat {
            x_pressed = true;
        }

        if (e.text == "z" || e.text == "Z") && !e.repeat {
            z_pressed = true;
            z_pressed_something = false;
        } else if z_pressed && !e.repeat {
            z_pressed_something = true;
        }

        if e.text == Key.Shift {
            shift_pressed_something = false;
        } else if e.modifiers.shift && !e.repeat {
            shift_pressed_something = true;
        }

        last_pressed_key = e;
    }
    public function update_release_states(e: KeyEvent) {
        if (e.text == "x" || e.text == "X") {
            x_pressed = false;
        } else if (e.text == "z" || e.text == "Z") {
            z_pressed = false;
        }
    }

    public function in_selection_mode() -> bool {
        selected_step_range_first != -1
    }

    public function cycle_selection_mode() {
        if selected_step_range_first == -1 {
            // Start selection mode
            selected_step_range_first = selected_step;

            // We can't only select release flags, so move back to the note column.
            if selected_column == 3 {
                selected_column = 2;
            }
        } else if !(selected_step_range_first == 0 && selected_step == 15)
               && !(selected_step_range_first == 15 && selected_step == 0) {
            // All rows are not selected, select all of them
            selected_step_range_first = 0;
            select_step(15);
        } else {
            cancel_selection_mode();
        }
    }

    public function cancel_selection_mode() {
        if selected_step_range_first != -1 {
            // Allows re-pasting near/where the copy/cut started
            select_step(min(selected_step_range_first, selected_step));
            selected_step_range_first = -1;
        }
    }

    public function toggle_play(song_mode: bool) {
        if ! /*currently*/ playing {
            // In song mode pin the selection to the active pattern/step
            // so that the playback position is kept visible.
            pin_selection_to_active = song_mode;

            // Reset the playback step position to the beginning of the pattern.
            GlobalEngine.activate_step(0);
        } else {
            // When not playing, keep the active step pinned to the selection so that
            // notes can be recorded on the selected step.
            // Also reset the playback step position to the selected song pattern and step.
            pin_selection_to_active = true;
            GlobalEngine.activate_song_pattern(GlobalEngine.sequencer_song_pattern_selected);
            GlobalEngine.activate_step(selected_step);
        }

        GlobalEngine.set_playing(!playing, song_mode);
    }

    public function cycle_step_note_start() {
        if selected_step_range_first == -1 {
            GlobalEngine.cycle_step_note_start(selected_step);
        }
    }
    public function cycle_step_note_end() {
        if selected_step_range_first == -1 {
            GlobalEngine.cycle_step_note_end(selected_step);
        }
    }
    public function cycle_step_note(forward: bool, large_inc: bool) {
        if selected_step_range_first == -1 {
            GlobalEngine.cycle_step_note(selected_step, forward, large_inc);
        } else {
            GlobalEngine.cycle_step_range_note(
                min(selected_step_range_first, selected_step),
                max(selected_step_range_first, selected_step),
                forward, large_inc);
        }
    }

    public function copy_step_selection() {
        if GlobalUI.selected_column < 2 /*params*/ {
            if selected_step_range_first == -1 {
                GlobalEngine.copy_step_range_param(selected_step, selected_step, selected_column);
            } else {
                GlobalEngine.copy_step_range_param(
                    min(selected_step_range_first, selected_step),
                    max(selected_step_range_first, selected_step),
                    selected_column);
            }
            cancel_selection_mode();
        } else if GlobalUI.selected_column == 2 /*press*/ {
            if selected_step_range_first == -1 {
                GlobalEngine.copy_step_range_note(selected_step, selected_step);
            } else {
                GlobalEngine.copy_step_range_note(
                    min(selected_step_range_first, selected_step),
                    max(selected_step_range_first, selected_step));
            }
            cancel_selection_mode();
        }
        // Ignore when on the release column
    }
    public function cut_steps() {
        if GlobalUI.selected_column < 2 /*params*/ {
            if selected_step_range_first == -1 {
                GlobalEngine.cut_step_single_param(selected_step, selected_column);
            } else {
                GlobalEngine.cut_step_range_param(
                    min(selected_step_range_first, selected_step),
                    max(selected_step_range_first, selected_step),
                    selected_column);
            }
            cancel_selection_mode();
        } else if GlobalUI.selected_column == 2 /*press*/ {
            if selected_step_range_first == -1 {
                GlobalEngine.cut_step_single_note(selected_step);
            } else {
                GlobalEngine.cut_step_range_note(
                    min(selected_step_range_first, selected_step),
                    max(selected_step_range_first, selected_step));
            }
            cancel_selection_mode();
        }
        // Ignore when on the release column
    }
    public function paste_step_selection() {
        if GlobalUI.selected_column < 2 /*params*/ {
            if selected_step_range_first == -1 {
                GlobalEngine.paste_step_range_param(selected_step, selected_column);
            }
        } else if GlobalUI.selected_column == 2 /*press*/ {
           if selected_step_range_first == -1 {
                GlobalEngine.paste_step_range_note(selected_step);
            }
        }

        // FIXME: Move the selection by the clipboard size.
        //        I don't know it here, I need to remember it separately when copying/cutting.
    }

    public function cycle_step_param_start() {
        if selected_step_range_first == -1 {
            GlobalEngine.cycle_step_param_start(selected_step, selected_column);
        }
    }
    public function cycle_step_param_end() {
        if selected_step_range_first == -1 {
            GlobalEngine.cycle_step_param_end(selected_step, selected_column);
        }
    }
    public function cycle_step_param(forward: bool, large_inc: bool) {
        if selected_step_range_first == -1 {
            GlobalEngine.cycle_step_param(selected_step, selected_column, forward, large_inc);
        } else {
            GlobalEngine.cycle_step_range_param(
                min(selected_step_range_first, selected_step),
                max(selected_step_range_first, selected_step),
                selected_column, forward, large_inc);
        }
    }
    public function toggle_step_release() {
        if selected_step_range_first == -1 {
            GlobalEngine.toggle_step_release(selected_step);
        } // Ignore when in selection mode since this doesn't "cycle", to be consistent.
    }

    public function select_song_pattern(song_pattern: int) {
        if playing {
            pin_selection_to_active = false;
        } else {
            // When not playing, make sure that the selected pattern is also activated
            // so that recording notes happen in the selected pattern and that playback will start there.
            GlobalEngine.activate_song_pattern(song_pattern);
        }
        GlobalEngine.display_song_pattern(song_pattern);
    }

    public function select_next_song_pattern(forward: bool) {
        if forward && GlobalEngine.sequencer_song_pattern_selected + 1 < GlobalEngine.sequencer_song_patterns.length {
            select_song_pattern(GlobalEngine.sequencer_song_pattern_selected + 1);
        } else if !forward && GlobalEngine.sequencer_song_pattern_selected > 0 {
            select_song_pattern(GlobalEngine.sequencer_song_pattern_selected - 1);
        }
    }

    public function select_step(step: int) {
        if playing {
            pin_selection_to_active = false;
        } else {
            // This updates the step receiving key record events when not playing.
            GlobalEngine.activate_step(step);
        }
        selected_step = step;
    }

    public function select_next_step(forward: bool) {
        if playing {
            pin_selection_to_active = false;
        }
        if forward {
            if selected_step < 15 {
                select_step(selected_step + 1);
            } else if selected_step_range_first == -1 {
                // FIXME: Report return val issue and re-use select_next_song_pattern
                if GlobalEngine.sequencer_song_pattern_selected + 1 < GlobalEngine.sequencer_song_patterns.length {
                    select_step(0);
                    select_next_song_pattern(true);
                }
            }
        } else {
            if selected_step > 0 {
                select_step(selected_step - 1);
            } else if selected_step_range_first == -1 {
                if GlobalEngine.sequencer_song_pattern_selected > 0 {
                    select_step(15);
                    select_next_song_pattern(false);
                }
            }
        }
    }

    public function update_selected_step() {
        if playing && pin_selection_to_active {
            selected_step = GlobalEngine.sequencer_step_active;
        }
    }

    public function update_selected_column() {
        if user_selected_column != selected_column {
            selected_column = user_selected_column;
        }
    }

}



export global GlobalEngine {
    in-out property<[SongPatternData]> sequencer_song_patterns: [
        {number: 0},
        {number: 1, selected: true},
        {number: 0},
        {number: 1},
        {number: 0},
        {number: 1},
        {number: 2},
        {number: 3}];
    // The selection cursor, used for keeping it scrolled into the view.
    in-out property<int> sequencer_song_pattern_selected: 0;
    in-out property<int> sequencer_song_pattern_active: 0;

    in-out property<[string]> script_instrument_ids: [];
    in-out property<int> sequencer_pattern_instruments_len: 0;
    in-out property<[PatternInstrumentData]> sequencer_pattern_instruments: [
        {id: "",
            notes: [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]},
        {id: "",
            notes: [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]},
        {id: "",
            notes: [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]},
        {id: "",
            notes: [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]},
        {id: "",
            notes: [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]},
        {id: "",
            notes: [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]},
    ];
    in-out property<[StepData]> sequencer_steps: [
        {press: true, note: 65},
        {press: false}, {press: false}, {press: false},
        {press: true, release: true, note: 65},
        {press: false}, {press: false}, {press: false},
        {press: true, note: 65},
        {press: false}, {press: false}, {press: false},
        {press: false, release: true},
        {press: false}, {press: false}, {press: false}];
    in-out property<int> sequencer_step_active: 8;

    in-out property<[InstrumentData]> instruments: [
        {id: "1", active: false}, {active: true}, {active: false}, {active: false},
        {active: false}, {active: false}, {active: false}, {active: false},
        {active: false}, {active: false}, {active: false}, {active: false},
        {active: false}, {active: false}, {active: false}, {active: false},
        {id: "17", active: false}, {active: false}, {active: false}, {active: false},
        {active: false}, {active: false}, {active: false}, {active: false},
        {active: false}, {active: false}, {active: false}, {active: false},
        {active: false}, {active: false}, {active: false}, {active: false},
        ];
    in-out property<ParamData> instrument_param_0: {defined: true, name: "DU"};
    in-out property<ParamData> instrument_param_1: {defined: true, name: "VO"};

    in-out property<int> displayed_instrument: 0;
    pure callback phase_visualization_tick(float) -> float;

    in-out property<int> last_synth_tick: -1;
    in-out property<[ChannelTraceNote]> synth_trace_notes: [
        { channel: 0, start_tick: 123, num_ticks: 1, octave: 3, key_pos: 0, is_black: false, volume: 1.0, },
        { channel: 0, start_tick: 123, num_ticks: 1, octave: 3, key_pos: 3, is_black: true, volume: 1.0, },
        { channel: 0, start_tick: 122, num_ticks: 1, octave: 3, key_pos: 0, is_black: false, volume: 1.0, },
        { channel: 0, start_tick: 121, num_ticks: 1, octave: 3, key_pos: 0, is_black: false, volume: 1.0, },
    ];
    in-out property<[ChannelActiveNote]> synth_active_notes: [
        { trace: { channel: 0, start_tick: 123, num_ticks: 1, octave: 3, key_pos: 0, is_black: false, volume: 1.0, }, note_name: "C", },
        { trace: { channel: 0, start_tick: 123, num_ticks: 1, octave: 3, key_pos: 3, is_black: true, volume: 1.0, }, note_name: "F#", },
    ];

    callback note_pressed(/*note*/ int);
    callback note_released(/*note*/ int);
    callback set_erasing(/*erasing*/ bool);
    callback display_instrument(/*instrument*/ int);
    callback cycle_instrument(/*col_delta*/ int, /*row_delta*/ int);
    callback cycle_pattern_instrument(/*forward*/ bool);
    callback cycle_step_note_start(/*step*/ int);
    callback cycle_step_note_end(/*step*/ int);
    callback cycle_step_note(/*step*/ int, /*forward*/ bool, /*large_inc*/ bool);
    callback cycle_step_range_note(/*step_range_first*/ int, /*step_range_last*/ int, /*forward*/ bool, /*large_inc*/ bool);
    callback copy_step_range_note(/*step_range_first*/ int, /*step_range_last*/ int);
    callback cut_step_range_note(/*step_range_first*/ int, /*step_range_last*/ int);
    callback cut_step_single_note(/*step*/ int);
    callback paste_step_range_note(/*at_step*/ int);
    callback cycle_instrument_param_start();
    callback cycle_instrument_param_end();
    callback cycle_instrument_param(/*param_num*/ int, /*forward*/ bool);
    callback cycle_step_param_start(/*step*/ int, /*param_num*/ int);
    callback cycle_step_param_end(/*step*/ int, /*param_num*/ int);
    callback cycle_step_param(/*step*/ int, /*param_num*/ int, /*forward*/ bool, /*large_inc*/ bool);
    callback cycle_step_range_param(/*step_range_first*/ int, /*step_range_last*/ int, /*param_num*/ int, /*forward*/ bool, /*large_inc*/ bool);
    callback copy_step_range_param(/*step_range_first*/ int, /*step_range_last*/ int, /*param_num*/ int);
    callback cut_step_range_param(/*step_range_first*/ int, /*step_range_last*/ int, /*param_num*/ int);
    callback cut_step_single_param(/*step*/ int, /*param_num*/ int);
    callback paste_step_range_param(/*at_step*/ int, /*param_num*/ int);
    callback cycle_song_pattern_start();
    callback cycle_song_pattern_start_with_new();
    callback cycle_song_pattern(/*forward*/ bool);
    callback toggle_mute_instrument(/*instrument*/ int);
    callback toggle_step(/*step*/ int);
    callback toggle_step_release(/*step*/ int);
    callback activate_step(/*step*/ int);
    callback set_playing(/*playing*/ bool, /*song_mode*/ bool);
    callback record_clicked(/*recording*/ bool);
    callback display_song_pattern(/*song_pattern*/ int);
    callback display_song_pattern_with_nearest_instrument(/*song_pattern*/ int);
    callback remove_last_song_pattern();
    callback clone_displayed_song_pattern();
    callback activate_song_pattern(/*song_pattern*/ int);
    callback open_file_dialog();
    callback open_gist(/*url*/ string);
    callback save_project();
    callback save_project_as();
    callback export_project_as_gba_sav();
    callback clear_song_and_load_default_instruments();
    callback mute_instruments();
}

export global GlobalSettings {
    in-out property<Settings> settings: {
        sync_enabled: false,
    };
    in-out property<SongSettings> song_settings: {
        frames_per_step: 7,
    };
    callback settings_changed(Settings);
    callback song_settings_changed(SongSettings);
}

export global GlobalUtils {
    pure callback get_midi_note_name(int) -> string;
    pure callback get_midi_note_short_name(int) -> string;
    pure callback to_signed_hex(int) -> string;
}

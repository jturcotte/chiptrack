// Copyright Â© 2021 Jocelyn Turcotte <turcotte.j@gmail.com>
// SPDX-License-Identifier: MIT

export struct SongPatternData {
    number: int,
    selected: bool,
}
export struct PatternInstrumentData {
    id: string,
    notes: [int],
}
export struct StepData {
    press: bool,
    release: bool,
    note: int,
    selected: bool,
    param0_set: bool,
    param0_val: int,
    param1_set: bool,
    param1_val: int,
}
export struct InstrumentData {
    id: string,
    active: bool,
    muted: bool,
    param0: int,
    param1: int,
}
export struct NoteData {
    note_number: int,
    key_pos: int,
    is_black: bool,
    active: bool,
}
export struct ChannelTraceNote {
    channel: int,
    start_tick: int,
    num_ticks: int,
    octave: int,
    key_pos: int,
    cent_adj: float,
    is_black: bool,
    volume: float,
}
export struct ChannelActiveNote {
    trace: ChannelTraceNote,
    note_name: string,
}
export struct Settings {
    sync_enabled: bool,
}
export struct SongSettings {
    frames_per_step: int,
}

export global GlobalEngine {
    in-out property<[SongPatternData]> sequencer_song_patterns: [
        {number: 0},
        {number: 1, selected: true},
        {number: 0},
        {number: 1},
        {number: 0},
        {number: 1},
        {number: 2},
        {number: 3}];
    in-out property<int> sequencer_song_pattern_active: 0;

    in-out property<[string]> script_instrument_ids: ["S1", "S2", "T1", "T2", "W1", "W2", "N2", "N4"];
    in-out property<int> sequencer_pattern_instruments_len: 6;
    in-out property<[PatternInstrumentData]> sequencer_pattern_instruments: [
        {id: "S2", 
            notes: [65, -1, -1, -1, 65, -1, -1, -1, 65, -1, -1, -1, 65, -1, -1, -1]},
        {id: "T2", 
            notes: [65, -1, 65, -1, 65, -1, 65, -1, 65, -1, 65, -1, 65, -1, 65, -1]},
        {id: "W1", 
            notes: [65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65]},
        {id: "N2", 
            notes: [65, -1, -1, -1, 65, -1, -1, -1, 65, -1, -1, -1, 65, -1, -1, -1]},
        {id: "N4", 
            notes: [65, -1, 65, -1, 65, -1, 65, -1, 65, -1, 65, -1, 65, -1, 65, -1]},
        {id: "N5", 
            notes: [65, -1, 65, -1, 65, -1, 65, -1, 65, -1, 65, -1, 65, -1, 65, -1]},
    ];
    in-out property<[StepData]> sequencer_steps: [
        {press: true, note: 65},
        {press: false}, {press: false}, {press: false},
        {press: true, release: true, note: 65},
        {press: false}, {press: false}, {press: false},
        {press: true, note: 65, selected: true},
        {press: false}, {press: false}, {press: false},
        {press: false, release: true},
        {press: false}, {press: false}, {press: false}];
    in-out property<int> sequencer_step_active: 0;

    in-out property<[InstrumentData]> instruments: [
        {id: "1", active: false}, {active: true}, {active: false}, {active: false},
        {active: false}, {active: false}, {active: false}, {active: false},
        {active: false}, {active: false}, {active: false}, {active: false},
        {active: false}, {active: false}, {active: false}, {active: false},
        {id: "17", active: false}, {active: false}, {active: false}, {active: false},
        {active: false}, {active: false}, {active: false}, {active: false},
        {active: false}, {active: false}, {active: false}, {active: false},
        {active: false}, {active: false}, {active: false}, {active: false},
        ];

    in-out property<int> current_instrument: 0;
    pure callback phase_visualization_tick(float) -> float;

    in-out property<[ChannelTraceNote]> synth_trace_notes: [
        { channel: 0, start_tick: 123, num_ticks: 1, octave: 3, key_pos: 0, is_black: false, volume: 1.0, },
        { channel: 0, start_tick: 123, num_ticks: 1, octave: 3, key_pos: 3, is_black: true, volume: 1.0, },
        { channel: 0, start_tick: 122, num_ticks: 1, octave: 3, key_pos: 0, is_black: false, volume: 1.0, },
        { channel: 0, start_tick: 121, num_ticks: 1, octave: 3, key_pos: 0, is_black: false, volume: 1.0, },
    ];
    in-out property<[ChannelActiveNote]> synth_active_notes: [
        { trace: { channel: 0, start_tick: 123, num_ticks: 1, octave: 3, key_pos: 0, is_black: false, volume: 1.0, }, note_name: "C", },
        { trace: { channel: 0, start_tick: 123, num_ticks: 1, octave: 3, key_pos: 3, is_black: true, volume: 1.0, }, note_name: "F#", },
    ];

    callback note_key_pressed(int);
    callback note_pressed(int);
    callback note_released(int);
    callback select_instrument(int);
    callback cycle_instrument(int, int);
    callback cycle_pattern_instrument(bool);
    callback cycle_note_start();
    callback cycle_note_end();
    callback cycle_note(bool, bool);
    callback cycle_instrument_param_start();
    callback cycle_instrument_param_end();
    callback cycle_instrument_param(int, bool);
    callback cycle_step_param_start();
    callback cycle_step_param_end();
    callback cycle_step_param(int, bool);
    callback toggle_mute_instrument(int);
    callback toggle_step(int);
    callback toggle_step_release(int);
    callback toggle_current_step_release();
    callback select_next_step(bool);
    callback play_clicked(bool);
    callback record_clicked(bool);
    callback select_next_song_pattern(bool);
    callback song_pattern_clicked(int);
    callback append_song_pattern(int);
    callback remove_last_song_pattern();
    callback save_project();
    callback export_project_as_gba_sav();
    callback mute_instruments();
}

export global GlobalSettings {
    in-out property<Settings> settings: {
        sync_enabled: false,
    };
    in-out property<SongSettings> song_settings: {
        frames_per_step: 7,
    };
    callback settings_changed(Settings);
    callback song_settings_changed(SongSettings);
}

export global GlobalUtils {
    pure callback get_midi_note_name(int) -> string;
    pure callback get_midi_note_short_name(int) -> string;
}
